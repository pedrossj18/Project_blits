
project_ph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002428  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08002534  08002534  00003534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f8  080026f8  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  080026f8  080026f8  000036f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002700  08002700  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002700  08002700  00003700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002704  08002704  00003704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002708  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000068  08002770  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002770  000041e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000342f  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011ea  00000000  00000000  000074c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  000086b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000397  00000000  00000000  00008bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001693a  00000000  00000000  00008f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ef3  00000000  00000000  0001f881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f8e0  00000000  00000000  00025774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5054  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000170c  00000000  00000000  000a5098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a67a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800251c 	.word	0x0800251c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800251c 	.word	0x0800251c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	4608      	mov	r0, r1
 8000166:	4611      	mov	r1, r2
 8000168:	461a      	mov	r2, r3
 800016a:	4603      	mov	r3, r0
 800016c:	70fb      	strb	r3, [r7, #3]
 800016e:	460b      	mov	r3, r1
 8000170:	70bb      	strb	r3, [r7, #2]
 8000172:	4613      	mov	r3, r2
 8000174:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8000176:	f107 0308 	add.w	r3, r7, #8
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	461a      	mov	r2, r3
 8000184:	f107 0308 	add.w	r3, r7, #8
 8000188:	cb03      	ldmia	r3!, {r0, r1}
 800018a:	6010      	str	r0, [r2, #0]
 800018c:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800018e:	2200      	movs	r2, #0
 8000190:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000194:	4847      	ldr	r0, [pc, #284]	@ (80002b4 <begin+0x158>)
 8000196:	f001 f906 	bl	80013a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 800019a:	2200      	movs	r2, #0
 800019c:	2108      	movs	r1, #8
 800019e:	4846      	ldr	r0, [pc, #280]	@ (80002b8 <begin+0x15c>)
 80001a0:	f001 f901 	bl	80013a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	2110      	movs	r1, #16
 80001a8:	4843      	ldr	r0, [pc, #268]	@ (80002b8 <begin+0x15c>)
 80001aa:	f001 f8fc 	bl	80013a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001b4:	4840      	ldr	r0, [pc, #256]	@ (80002b8 <begin+0x15c>)
 80001b6:	f001 f8f6 	bl	80013a6 <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c0:	483d      	ldr	r0, [pc, #244]	@ (80002b8 <begin+0x15c>)
 80001c2:	f001 f8f0 	bl	80013a6 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001cc:	483a      	ldr	r0, [pc, #232]	@ (80002b8 <begin+0x15c>)
 80001ce:	f001 f8ea 	bl	80013a6 <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
	#endif

	if (lines > 1) {
 80001d2:	78bb      	ldrb	r3, [r7, #2]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d906      	bls.n	80001e6 <begin+0x8a>
		lcd->_displayfunction |= LCD_2LINE;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	f043 0308 	orr.w	r3, r3, #8
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	78ba      	ldrb	r2, [r7, #2]
 80001ea:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80001ec:	78fa      	ldrb	r2, [r7, #3]
 80001ee:	78fb      	ldrb	r3, [r7, #3]
 80001f0:	3340      	adds	r3, #64	@ 0x40
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	4613      	mov	r3, r2
 80001f6:	2240      	movs	r2, #64	@ 0x40
 80001f8:	2100      	movs	r1, #0
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f000 f93a 	bl	8000474 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000200:	787b      	ldrb	r3, [r7, #1]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d009      	beq.n	800021a <begin+0xbe>
 8000206:	78bb      	ldrb	r3, [r7, #2]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d106      	bne.n	800021a <begin+0xbe>
		lcd->_displayfunction |= LCD_5x10DOTS;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	b2da      	uxtb	r2, r3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 800021a:	2032      	movs	r0, #50	@ 0x32
 800021c:	f000 fe20 	bl	8000e60 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000226:	4824      	ldr	r0, [pc, #144]	@ (80002b8 <begin+0x15c>)
 8000228:	f001 f8bd 	bl	80013a6 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000232:	4821      	ldr	r0, [pc, #132]	@ (80002b8 <begin+0x15c>)
 8000234:	f001 f8b7 	bl	80013a6 <HAL_GPIO_WritePin>
	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d014      	beq.n	800026a <begin+0x10e>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8000240:	2003      	movs	r0, #3
 8000242:	f000 f8cb 	bl	80003dc <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 8000246:	2005      	movs	r0, #5
 8000248:	f000 fe0a 	bl	8000e60 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 800024c:	2003      	movs	r0, #3
 800024e:	f000 f8c5 	bl	80003dc <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 8000252:	2005      	movs	r0, #5
 8000254:	f000 fe04 	bl	8000e60 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 8000258:	2003      	movs	r0, #3
 800025a:	f000 f8bf 	bl	80003dc <write4bits>
		HAL_Delay(5);
 800025e:	2005      	movs	r0, #5
 8000260:	f000 fdfe 	bl	8000e60 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 8000264:	2002      	movs	r0, #2
 8000266:	f000 f8b9 	bl	80003dc <write4bits>
		HAL_Delay(1);
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	b2db      	uxtb	r3, r3
 8000274:	4619      	mov	r1, r3
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f000 f8ec 	bl	8000454 <command>
    HAL_Delay(1);
 800027c:	2001      	movs	r0, #1
 800027e:	f000 fdef 	bl	8000e60 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2204      	movs	r2, #4
 8000286:	705a      	strb	r2, [r3, #1]
    display(lcd);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f848 	bl	800031e <display>

    // Limpa display
    clear(lcd);
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f000 f836 	bl	8000300 <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2202      	movs	r2, #2
 8000298:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	4619      	mov	r1, r3
 80002a6:	6878      	ldr	r0, [r7, #4]
 80002a8:	f000 f8d4 	bl	8000454 <command>
}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40010800 	.word	0x40010800
 80002b8:	40010c00 	.word	0x40010c00

080002bc <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 80002c6:	6838      	ldr	r0, [r7, #0]
 80002c8:	f7ff ff40 	bl	800014c <strlen>
 80002cc:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
 80002d2:	e00c      	b.n	80002ee <print+0x32>
		write(lcd ,*(value+i));
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	4413      	add	r3, r2
 80002da:	f993 3000 	ldrsb.w	r3, [r3]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	4619      	mov	r1, r3
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f000 f833 	bl	800034e <write>
	for (uint8_t i = 0; i < Lengh; i++){
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	3301      	adds	r3, #1
 80002ec:	73fb      	strb	r3, [r7, #15]
 80002ee:	7bfb      	ldrb	r3, [r7, #15]
 80002f0:	68ba      	ldr	r2, [r7, #8]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d8ee      	bhi.n	80002d4 <print+0x18>
	}
}
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 8000308:	2101      	movs	r1, #1
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f8a2 	bl	8000454 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 8000310:	2002      	movs	r0, #2
 8000312:	f000 fda5 	bl	8000e60 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	785b      	ldrb	r3, [r3, #1]
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	b2da      	uxtb	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	785b      	ldrb	r3, [r3, #1]
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	b2db      	uxtb	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 f887 	bl	8000454 <command>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	460b      	mov	r3, r1
 8000358:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	2201      	movs	r2, #1
 800035e:	4619      	mov	r1, r3
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f000 f805 	bl	8000370 <send>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
 800037c:	4613      	mov	r3, r2
 800037e:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 8000380:	78bb      	ldrb	r3, [r7, #2]
 8000382:	461a      	mov	r2, r3
 8000384:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000388:	4808      	ldr	r0, [pc, #32]	@ (80003ac <send+0x3c>)
 800038a:	f001 f80c 	bl	80013a6 <HAL_GPIO_WritePin>
	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
	    write8bits(value);
	  } else {
	#endif
	    write4bits(value>>4);
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	091b      	lsrs	r3, r3, #4
 8000392:	b2db      	uxtb	r3, r3
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f821 	bl	80003dc <write4bits>
	    write4bits(value);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f81d 	bl	80003dc <write4bits>
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010c00 	.word	0x40010c00

080003b0 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003ba:	4807      	ldr	r0, [pc, #28]	@ (80003d8 <pulseEnable+0x28>)
 80003bc:	f000 fff3 	bl	80013a6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 fd4d 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003cc:	4802      	ldr	r0, [pc, #8]	@ (80003d8 <pulseEnable+0x28>)
 80003ce:	f000 ffea 	bl	80013a6 <HAL_GPIO_WritePin>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010c00 	.word	0x40010c00

080003dc <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003f4:	4815      	ldr	r0, [pc, #84]	@ (800044c <write4bits+0x70>)
 80003f6:	f000 ffd6 	bl	80013a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	085b      	lsrs	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	f003 0301 	and.w	r3, r3, #1
 8000404:	b2db      	uxtb	r3, r3
 8000406:	461a      	mov	r2, r3
 8000408:	2108      	movs	r1, #8
 800040a:	4811      	ldr	r0, [pc, #68]	@ (8000450 <write4bits+0x74>)
 800040c:	f000 ffcb 	bl	80013a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	089b      	lsrs	r3, r3, #2
 8000414:	b2db      	uxtb	r3, r3
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	2110      	movs	r1, #16
 8000420:	480b      	ldr	r0, [pc, #44]	@ (8000450 <write4bits+0x74>)
 8000422:	f000 ffc0 	bl	80013a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	b2db      	uxtb	r3, r3
 8000432:	461a      	mov	r2, r3
 8000434:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000438:	4805      	ldr	r0, [pc, #20]	@ (8000450 <write4bits+0x74>)
 800043a:	f000 ffb4 	bl	80013a6 <HAL_GPIO_WritePin>

	pulseEnable();
 800043e:	f7ff ffb7 	bl	80003b0 <pulseEnable>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00

08000454 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	2200      	movs	r2, #0
 8000464:	4619      	mov	r1, r3
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff ff82 	bl	8000370 <send>
}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	b2da      	uxtb	r2, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	b2da      	uxtb	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	b2da      	uxtb	r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	b2da      	uxtb	r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	71da      	strb	r2, [r3, #7]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	70fb      	strb	r3, [r7, #3]
 80004b8:	4613      	mov	r3, r2
 80004ba:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 80004bc:	2304      	movs	r3, #4
 80004be:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 80004c0:	78bb      	ldrb	r3, [r7, #2]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d803      	bhi.n	80004d0 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	3b01      	subs	r3, #1
 80004ce:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	78db      	ldrb	r3, [r3, #3]
 80004d4:	78ba      	ldrb	r2, [r7, #2]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d303      	bcc.n	80004e2 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	78db      	ldrb	r3, [r3, #3]
 80004de:	3b01      	subs	r3, #1
 80004e0:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 80004e2:	78bb      	ldrb	r3, [r7, #2]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	4413      	add	r3, r2
 80004e8:	791a      	ldrb	r2, [r3, #4]
 80004ea:	78fb      	ldrb	r3, [r7, #3]
 80004ec:	4413      	add	r3, r2
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004f6:	b25b      	sxtb	r3, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ffa9 	bl	8000454 <command>
}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <main>:
// Função de inicialização
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    HAL_Init();
 8000510:	f000 fc44 	bl	8000d9c <HAL_Init>
    SystemClock_Config();
 8000514:	f000 faa4 	bl	8000a60 <SystemClock_Config>
    MX_GPIO_Init();
 8000518:	f000 fae8 	bl	8000aec <MX_GPIO_Init>

    // Inicializa o LCD
    begin(&lcd, 16, 2, LCD_5x8DOTS);
 800051c:	2300      	movs	r3, #0
 800051e:	2202      	movs	r2, #2
 8000520:	2110      	movs	r1, #16
 8000522:	484c      	ldr	r0, [pc, #304]	@ (8000654 <main+0x148>)
 8000524:	f7ff fe1a 	bl	800015c <begin>

    apresentacao();
 8000528:	f000 f8a4 	bl	8000674 <apresentacao>

    // Loop principal
    while (1)
    {
        // Leituras dos Botões
        button_dir = HAL_GPIO_ReadPin(BT_DIR_GPIO_Port, BT_DIR_Pin);   // Botão direito
 800052c:	2108      	movs	r1, #8
 800052e:	484a      	ldr	r0, [pc, #296]	@ (8000658 <main+0x14c>)
 8000530:	f000 ff22 	bl	8001378 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b48      	ldr	r3, [pc, #288]	@ (800065c <main+0x150>)
 800053a:	701a      	strb	r2, [r3, #0]
        button_esq = HAL_GPIO_ReadPin(BT_ESQ_GPIO_Port, BT_ESQ_Pin);   // Botão esquerdo
 800053c:	2140      	movs	r1, #64	@ 0x40
 800053e:	4846      	ldr	r0, [pc, #280]	@ (8000658 <main+0x14c>)
 8000540:	f000 ff1a 	bl	8001378 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	4b45      	ldr	r3, [pc, #276]	@ (8000660 <main+0x154>)
 800054a:	701a      	strb	r2, [r3, #0]
        button_cima = HAL_GPIO_ReadPin(BT_CIMA_GPIO_Port, BT_CIMA_Pin); // Botão cima
 800054c:	2110      	movs	r1, #16
 800054e:	4842      	ldr	r0, [pc, #264]	@ (8000658 <main+0x14c>)
 8000550:	f000 ff12 	bl	8001378 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b42      	ldr	r3, [pc, #264]	@ (8000664 <main+0x158>)
 800055a:	701a      	strb	r2, [r3, #0]
        button_baixo = HAL_GPIO_ReadPin(BT_BAIXO_GPIO_Port, BT_BAIXO_Pin); // Botão baixo
 800055c:	2120      	movs	r1, #32
 800055e:	483e      	ldr	r0, [pc, #248]	@ (8000658 <main+0x14c>)
 8000560:	f000 ff0a 	bl	8001378 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	461a      	mov	r2, r3
 8000568:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <main+0x15c>)
 800056a:	701a      	strb	r2, [r3, #0]

        // Verifica se exatamente um botão está pressionado.
        // A condição checa se apenas um dos quatro botões (direita, esquerda, cima ou baixo) está pressionado,
        // enquanto os outros três botões não estão pressionados.
        if ((button_dir == GPIO_PIN_SET && button_esq != GPIO_PIN_SET && button_cima != GPIO_PIN_SET && button_baixo != GPIO_PIN_SET) ||
 800056c:	4b3b      	ldr	r3, [pc, #236]	@ (800065c <main+0x150>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d10b      	bne.n	800058c <main+0x80>
 8000574:	4b3a      	ldr	r3, [pc, #232]	@ (8000660 <main+0x154>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d007      	beq.n	800058c <main+0x80>
 800057c:	4b39      	ldr	r3, [pc, #228]	@ (8000664 <main+0x158>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d003      	beq.n	800058c <main+0x80>
 8000584:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <main+0x15c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d12f      	bne.n	80005ec <main+0xe0>
            (button_esq == GPIO_PIN_SET && button_dir != GPIO_PIN_SET && button_cima != GPIO_PIN_SET && button_baixo != GPIO_PIN_SET) ||
 800058c:	4b34      	ldr	r3, [pc, #208]	@ (8000660 <main+0x154>)
 800058e:	781b      	ldrb	r3, [r3, #0]
        if ((button_dir == GPIO_PIN_SET && button_esq != GPIO_PIN_SET && button_cima != GPIO_PIN_SET && button_baixo != GPIO_PIN_SET) ||
 8000590:	2b01      	cmp	r3, #1
 8000592:	d10b      	bne.n	80005ac <main+0xa0>
            (button_esq == GPIO_PIN_SET && button_dir != GPIO_PIN_SET && button_cima != GPIO_PIN_SET && button_baixo != GPIO_PIN_SET) ||
 8000594:	4b31      	ldr	r3, [pc, #196]	@ (800065c <main+0x150>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d007      	beq.n	80005ac <main+0xa0>
 800059c:	4b31      	ldr	r3, [pc, #196]	@ (8000664 <main+0x158>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d003      	beq.n	80005ac <main+0xa0>
 80005a4:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <main+0x15c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d11f      	bne.n	80005ec <main+0xe0>
            (button_cima == GPIO_PIN_SET && button_esq != GPIO_PIN_SET && button_dir != GPIO_PIN_SET && button_baixo != GPIO_PIN_SET) ||
 80005ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000664 <main+0x158>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
            (button_esq == GPIO_PIN_SET && button_dir != GPIO_PIN_SET && button_cima != GPIO_PIN_SET && button_baixo != GPIO_PIN_SET) ||
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d10b      	bne.n	80005cc <main+0xc0>
            (button_cima == GPIO_PIN_SET && button_esq != GPIO_PIN_SET && button_dir != GPIO_PIN_SET && button_baixo != GPIO_PIN_SET) ||
 80005b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <main+0x154>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d007      	beq.n	80005cc <main+0xc0>
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <main+0x150>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d003      	beq.n	80005cc <main+0xc0>
 80005c4:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <main+0x15c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d10f      	bne.n	80005ec <main+0xe0>
            (button_baixo == GPIO_PIN_SET && button_esq != GPIO_PIN_SET && button_dir != GPIO_PIN_SET && button_cima != GPIO_PIN_SET))
 80005cc:	4b26      	ldr	r3, [pc, #152]	@ (8000668 <main+0x15c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
            (button_cima == GPIO_PIN_SET && button_esq != GPIO_PIN_SET && button_dir != GPIO_PIN_SET && button_baixo != GPIO_PIN_SET) ||
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d112      	bne.n	80005fa <main+0xee>
            (button_baixo == GPIO_PIN_SET && button_esq != GPIO_PIN_SET && button_dir != GPIO_PIN_SET && button_cima != GPIO_PIN_SET))
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <main+0x154>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00e      	beq.n	80005fa <main+0xee>
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <main+0x150>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00a      	beq.n	80005fa <main+0xee>
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <main+0x158>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d006      	beq.n	80005fa <main+0xee>
        {
            // Acende o LED vermelho se apenas um dos botões estiver pressionado
            HAL_GPIO_WritePin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin, GPIO_PIN_SET);  // Acende o LED
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f2:	481e      	ldr	r0, [pc, #120]	@ (800066c <main+0x160>)
 80005f4:	f000 fed7 	bl	80013a6 <HAL_GPIO_WritePin>
 80005f8:	e005      	b.n	8000606 <main+0xfa>
        }
        else
        {
            // Apaga o LED vermelho se nenhum ou mais de um botão estiver pressionado
            HAL_GPIO_WritePin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin, GPIO_PIN_RESET);  // Apaga o LED
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000600:	481a      	ldr	r0, [pc, #104]	@ (800066c <main+0x160>)
 8000602:	f000 fed0 	bl	80013a6 <HAL_GPIO_WritePin>
        }
        keyboard();  // Leitura dos botões
 8000606:	f000 f85b 	bl	80006c0 <keyboard>

        // Controle do menu
        switch (menu_num)
 800060a:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <main+0x164>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	2b04      	cmp	r3, #4
 8000612:	d88b      	bhi.n	800052c <main+0x20>
 8000614:	a201      	add	r2, pc, #4	@ (adr r2, 800061c <main+0x110>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	08000631 	.word	0x08000631
 8000620:	08000637 	.word	0x08000637
 8000624:	0800063d 	.word	0x0800063d
 8000628:	08000643 	.word	0x08000643
 800062c:	08000649 	.word	0x08000649
        {
            case 1: menu1(); break;
 8000630:	f000 f91e 	bl	8000870 <menu1>
 8000634:	e00c      	b.n	8000650 <main+0x144>
            case 2: menu2(); break;
 8000636:	f000 f959 	bl	80008ec <menu2>
 800063a:	e009      	b.n	8000650 <main+0x144>
            case 3: menu3(); break;
 800063c:	f000 f994 	bl	8000968 <menu3>
 8000640:	e006      	b.n	8000650 <main+0x144>
            case 4: menu4(); break;
 8000642:	f000 f9cf 	bl	80009e4 <menu4>
 8000646:	e003      	b.n	8000650 <main+0x144>
            case 5: menuValores(); break;// Menu para os valores de 1980 a 2060
 8000648:	f000 f898 	bl	800077c <menuValores>
 800064c:	bf00      	nop
 800064e:	e76d      	b.n	800052c <main+0x20>
        button_dir = HAL_GPIO_ReadPin(BT_DIR_GPIO_Port, BT_DIR_Pin);   // Botão direito
 8000650:	e76c      	b.n	800052c <main+0x20>
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088
 8000658:	40010800 	.word	0x40010800
 800065c:	20000084 	.word	0x20000084
 8000660:	20000085 	.word	0x20000085
 8000664:	20000086 	.word	0x20000086
 8000668:	20000087 	.word	0x20000087
 800066c:	40011000 	.word	0x40011000
 8000670:	20000000 	.word	0x20000000

08000674 <apresentacao>:
// Fim da função "main"
// Função de leitura dos botões e navegação

// Função para exibir a apresentação ao ligar
void apresentacao()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    clear(&lcd);
 8000678:	480e      	ldr	r0, [pc, #56]	@ (80006b4 <apresentacao+0x40>)
 800067a:	f7ff fe41 	bl	8000300 <clear>
    setCursor(&lcd, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <apresentacao+0x40>)
 8000684:	f7ff ff12 	bl	80004ac <setCursor>
    print(&lcd, (int8_t *)"   BEM-VINDO   ");
 8000688:	490b      	ldr	r1, [pc, #44]	@ (80006b8 <apresentacao+0x44>)
 800068a:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <apresentacao+0x40>)
 800068c:	f7ff fe16 	bl	80002bc <print>
    setCursor(&lcd, 0, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	2100      	movs	r1, #0
 8000694:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <apresentacao+0x40>)
 8000696:	f7ff ff09 	bl	80004ac <setCursor>
    print(&lcd, (int8_t *)"    INDFLOW    ");
 800069a:	4908      	ldr	r1, [pc, #32]	@ (80006bc <apresentacao+0x48>)
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <apresentacao+0x40>)
 800069e:	f7ff fe0d 	bl	80002bc <print>

    HAL_Delay(4000);  // Delay de 5 segundos
 80006a2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80006a6:	f000 fbdb 	bl	8000e60 <HAL_Delay>

    clear(&lcd);  // Limpa a tela após o delay
 80006aa:	4802      	ldr	r0, [pc, #8]	@ (80006b4 <apresentacao+0x40>)
 80006ac:	f7ff fe28 	bl	8000300 <clear>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000088 	.word	0x20000088
 80006b8:	08002534 	.word	0x08002534
 80006bc:	08002544 	.word	0x08002544

080006c0 <keyboard>:

//Configuração dos Botões
void keyboard()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    // Botão para aumentar a opção do menu
    if (HAL_GPIO_ReadPin(BT_CIMA_GPIO_Port, BT_CIMA_Pin) == GPIO_PIN_SET && sub_menu == 1)
 80006c4:	2110      	movs	r1, #16
 80006c6:	482a      	ldr	r0, [pc, #168]	@ (8000770 <keyboard+0xb0>)
 80006c8:	f000 fe56 	bl	8001378 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d10f      	bne.n	80006f2 <keyboard+0x32>
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <keyboard+0xb4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d10b      	bne.n	80006f2 <keyboard+0x32>
    {
        HAL_Delay(150);
 80006da:	2096      	movs	r0, #150	@ 0x96
 80006dc:	f000 fbc0 	bl	8000e60 <HAL_Delay>
        if (menu_num < menu_max) menu_num += 1;  // Avança para o próximo menu
 80006e0:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <keyboard+0xb8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	dc04      	bgt.n	80006f2 <keyboard+0x32>
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <keyboard+0xb8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a22      	ldr	r2, [pc, #136]	@ (8000778 <keyboard+0xb8>)
 80006f0:	6013      	str	r3, [r2, #0]
    }

    // Botão para diminuir a opção do menu
    if (HAL_GPIO_ReadPin(BT_BAIXO_GPIO_Port, BT_BAIXO_Pin) == GPIO_PIN_SET && sub_menu == 1)
 80006f2:	2120      	movs	r1, #32
 80006f4:	481e      	ldr	r0, [pc, #120]	@ (8000770 <keyboard+0xb0>)
 80006f6:	f000 fe3f 	bl	8001378 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d10f      	bne.n	8000720 <keyboard+0x60>
 8000700:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <keyboard+0xb4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d10b      	bne.n	8000720 <keyboard+0x60>
    {
        HAL_Delay(150);
 8000708:	2096      	movs	r0, #150	@ 0x96
 800070a:	f000 fba9 	bl	8000e60 <HAL_Delay>
        if (menu_num > 1) menu_num -= 1;  // Volta para o menu anterior
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <keyboard+0xb8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	dd04      	ble.n	8000720 <keyboard+0x60>
 8000716:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <keyboard+0xb8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3b01      	subs	r3, #1
 800071c:	4a16      	ldr	r2, [pc, #88]	@ (8000778 <keyboard+0xb8>)
 800071e:	6013      	str	r3, [r2, #0]
    }

    // Botão para entrar na opção selecionada
    if (HAL_GPIO_ReadPin(BT_DIR_GPIO_Port, BT_DIR_Pin) == GPIO_PIN_SET)
 8000720:	2108      	movs	r1, #8
 8000722:	4813      	ldr	r0, [pc, #76]	@ (8000770 <keyboard+0xb0>)
 8000724:	f000 fe28 	bl	8001378 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b01      	cmp	r3, #1
 800072c:	d10b      	bne.n	8000746 <keyboard+0x86>
    {
        HAL_Delay(150);
 800072e:	2096      	movs	r0, #150	@ 0x96
 8000730:	f000 fb96 	bl	8000e60 <HAL_Delay>
        if (sub_menu < 2) sub_menu += 1;  // Entra no submenu
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <keyboard+0xb4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	dc04      	bgt.n	8000746 <keyboard+0x86>
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <keyboard+0xb4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	4a0c      	ldr	r2, [pc, #48]	@ (8000774 <keyboard+0xb4>)
 8000744:	6013      	str	r3, [r2, #0]
    }

    // Botão para voltar ao menu anterior
    if (HAL_GPIO_ReadPin(BT_ESQ_GPIO_Port, BT_ESQ_Pin) == GPIO_PIN_SET)
 8000746:	2140      	movs	r1, #64	@ 0x40
 8000748:	4809      	ldr	r0, [pc, #36]	@ (8000770 <keyboard+0xb0>)
 800074a:	f000 fe15 	bl	8001378 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d10b      	bne.n	800076c <keyboard+0xac>
    {
        HAL_Delay(150);
 8000754:	2096      	movs	r0, #150	@ 0x96
 8000756:	f000 fb83 	bl	8000e60 <HAL_Delay>
        if (sub_menu > 1) sub_menu -= 1;  // Volta ao menu principal
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <keyboard+0xb4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	dd04      	ble.n	800076c <keyboard+0xac>
 8000762:	4b04      	ldr	r3, [pc, #16]	@ (8000774 <keyboard+0xb4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3b01      	subs	r3, #1
 8000768:	4a02      	ldr	r2, [pc, #8]	@ (8000774 <keyboard+0xb4>)
 800076a:	6013      	str	r3, [r2, #0]
    }
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010800 	.word	0x40010800
 8000774:	20000004 	.word	0x20000004
 8000778:	20000000 	.word	0x20000000

0800077c <menuValores>:

// Funções dos menus
void menuValores()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
    // Submenu para modificar o valor
    switch (sub_menu)
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <menuValores+0xd0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d002      	beq.n	8000790 <menuValores+0x14>
 800078a:	2b02      	cmp	r3, #2
 800078c:	d01b      	beq.n	80007c6 <menuValores+0x4a>
            setCursor(&lcd, 0, 1);
            snprintf(buffer, sizeof(buffer), "SENHA:     %d", current_value);
            print(&lcd, (int8_t *)buffer);
            break;
    }
}
 800078e:	e059      	b.n	8000844 <menuValores+0xc8>
            setCursor(&lcd, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	482e      	ldr	r0, [pc, #184]	@ (8000850 <menuValores+0xd4>)
 8000796:	f7ff fe89 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"<PARAMETRIZACAO>");
 800079a:	492e      	ldr	r1, [pc, #184]	@ (8000854 <menuValores+0xd8>)
 800079c:	482c      	ldr	r0, [pc, #176]	@ (8000850 <menuValores+0xd4>)
 800079e:	f7ff fd8d 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2100      	movs	r1, #0
 80007a6:	482a      	ldr	r0, [pc, #168]	@ (8000850 <menuValores+0xd4>)
 80007a8:	f7ff fe80 	bl	80004ac <setCursor>
            snprintf(buffer, sizeof(buffer), "ENTRAR:    %d", current_value);
 80007ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000858 <menuValores+0xdc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4638      	mov	r0, r7
 80007b2:	4a2a      	ldr	r2, [pc, #168]	@ (800085c <menuValores+0xe0>)
 80007b4:	2110      	movs	r1, #16
 80007b6:	f001 f9ed 	bl	8001b94 <sniprintf>
            print(&lcd, (int8_t *)buffer);
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4824      	ldr	r0, [pc, #144]	@ (8000850 <menuValores+0xd4>)
 80007c0:	f7ff fd7c 	bl	80002bc <print>
            break;
 80007c4:	e03e      	b.n	8000844 <menuValores+0xc8>
            if (button_cima == GPIO_PIN_SET)
 80007c6:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <menuValores+0xe4>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10d      	bne.n	80007ea <menuValores+0x6e>
                HAL_Delay(20);
 80007ce:	2014      	movs	r0, #20
 80007d0:	f000 fb46 	bl	8000e60 <HAL_Delay>
                if (current_value < max_value) current_value += 1;  // Aumenta o valor
 80007d4:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <menuValores+0xdc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f640 0232 	movw	r2, #2098	@ 0x832
 80007dc:	4293      	cmp	r3, r2
 80007de:	dc04      	bgt.n	80007ea <menuValores+0x6e>
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <menuValores+0xdc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000858 <menuValores+0xdc>)
 80007e8:	6013      	str	r3, [r2, #0]
            if (button_baixo == GPIO_PIN_SET)
 80007ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <menuValores+0xe8>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d10d      	bne.n	800080e <menuValores+0x92>
                HAL_Delay(20);
 80007f2:	2014      	movs	r0, #20
 80007f4:	f000 fb34 	bl	8000e60 <HAL_Delay>
                if (current_value > min_value) current_value -= 1;  // Diminui o valor
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <menuValores+0xdc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000800:	4293      	cmp	r3, r2
 8000802:	dd04      	ble.n	800080e <menuValores+0x92>
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <menuValores+0xdc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3b01      	subs	r3, #1
 800080a:	4a13      	ldr	r2, [pc, #76]	@ (8000858 <menuValores+0xdc>)
 800080c:	6013      	str	r3, [r2, #0]
            setCursor(&lcd, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	480f      	ldr	r0, [pc, #60]	@ (8000850 <menuValores+0xd4>)
 8000814:	f7ff fe4a 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)" PARAMETRIZACAO ");
 8000818:	4913      	ldr	r1, [pc, #76]	@ (8000868 <menuValores+0xec>)
 800081a:	480d      	ldr	r0, [pc, #52]	@ (8000850 <menuValores+0xd4>)
 800081c:	f7ff fd4e 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 8000820:	2201      	movs	r2, #1
 8000822:	2100      	movs	r1, #0
 8000824:	480a      	ldr	r0, [pc, #40]	@ (8000850 <menuValores+0xd4>)
 8000826:	f7ff fe41 	bl	80004ac <setCursor>
            snprintf(buffer, sizeof(buffer), "SENHA:     %d", current_value);
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <menuValores+0xdc>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4638      	mov	r0, r7
 8000830:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <menuValores+0xf0>)
 8000832:	2110      	movs	r1, #16
 8000834:	f001 f9ae 	bl	8001b94 <sniprintf>
            print(&lcd, (int8_t *)buffer);
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <menuValores+0xd4>)
 800083e:	f7ff fd3d 	bl	80002bc <print>
            break;
 8000842:	bf00      	nop
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000004 	.word	0x20000004
 8000850:	20000088 	.word	0x20000088
 8000854:	08002554 	.word	0x08002554
 8000858:	20000008 	.word	0x20000008
 800085c:	08002568 	.word	0x08002568
 8000860:	20000086 	.word	0x20000086
 8000864:	20000087 	.word	0x20000087
 8000868:	08002578 	.word	0x08002578
 800086c:	0800258c 	.word	0x0800258c

08000870 <menu1>:

void menu1()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    switch (sub_menu)
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <menu1+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d002      	beq.n	8000882 <menu1+0x12>
 800087c:	2b02      	cmp	r3, #2
 800087e:	d013      	beq.n	80008a8 <menu1+0x38>
            print(&lcd, (int8_t *)"   Voltimetro   ");
            setCursor(&lcd, 0, 1);
            print(&lcd, (int8_t *)"   10.0 Volts   ");
            break;
    }
}
 8000880:	e025      	b.n	80008ce <menu1+0x5e>
            setCursor(&lcd, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	4814      	ldr	r0, [pc, #80]	@ (80008d8 <menu1+0x68>)
 8000888:	f7ff fe10 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   Voltimetro  >");
 800088c:	4913      	ldr	r1, [pc, #76]	@ (80008dc <menu1+0x6c>)
 800088e:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <menu1+0x68>)
 8000890:	f7ff fd14 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 8000894:	2201      	movs	r2, #1
 8000896:	2100      	movs	r1, #0
 8000898:	480f      	ldr	r0, [pc, #60]	@ (80008d8 <menu1+0x68>)
 800089a:	f7ff fe07 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"                ");
 800089e:	4910      	ldr	r1, [pc, #64]	@ (80008e0 <menu1+0x70>)
 80008a0:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <menu1+0x68>)
 80008a2:	f7ff fd0b 	bl	80002bc <print>
            break;
 80008a6:	e012      	b.n	80008ce <menu1+0x5e>
            setCursor(&lcd, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	480a      	ldr	r0, [pc, #40]	@ (80008d8 <menu1+0x68>)
 80008ae:	f7ff fdfd 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   Voltimetro   ");
 80008b2:	490c      	ldr	r1, [pc, #48]	@ (80008e4 <menu1+0x74>)
 80008b4:	4808      	ldr	r0, [pc, #32]	@ (80008d8 <menu1+0x68>)
 80008b6:	f7ff fd01 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2100      	movs	r1, #0
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <menu1+0x68>)
 80008c0:	f7ff fdf4 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   10.0 Volts   ");
 80008c4:	4908      	ldr	r1, [pc, #32]	@ (80008e8 <menu1+0x78>)
 80008c6:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <menu1+0x68>)
 80008c8:	f7ff fcf8 	bl	80002bc <print>
            break;
 80008cc:	bf00      	nop
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000004 	.word	0x20000004
 80008d8:	20000088 	.word	0x20000088
 80008dc:	0800259c 	.word	0x0800259c
 80008e0:	080025b0 	.word	0x080025b0
 80008e4:	080025c4 	.word	0x080025c4
 80008e8:	080025d8 	.word	0x080025d8

080008ec <menu2>:

void menu2()
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    switch (sub_menu)
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <menu2+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d002      	beq.n	80008fe <menu2+0x12>
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d013      	beq.n	8000924 <menu2+0x38>
            print(&lcd, (int8_t *)"   Amperimetro  ");
            setCursor(&lcd, 0, 1);
            print(&lcd, (int8_t *)"    1.5 Amps    ");
            break;
    }
}
 80008fc:	e025      	b.n	800094a <menu2+0x5e>
            setCursor(&lcd, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	4814      	ldr	r0, [pc, #80]	@ (8000954 <menu2+0x68>)
 8000904:	f7ff fdd2 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"<  Amperimetro >");
 8000908:	4913      	ldr	r1, [pc, #76]	@ (8000958 <menu2+0x6c>)
 800090a:	4812      	ldr	r0, [pc, #72]	@ (8000954 <menu2+0x68>)
 800090c:	f7ff fcd6 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	2100      	movs	r1, #0
 8000914:	480f      	ldr	r0, [pc, #60]	@ (8000954 <menu2+0x68>)
 8000916:	f7ff fdc9 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"                ");
 800091a:	4910      	ldr	r1, [pc, #64]	@ (800095c <menu2+0x70>)
 800091c:	480d      	ldr	r0, [pc, #52]	@ (8000954 <menu2+0x68>)
 800091e:	f7ff fccd 	bl	80002bc <print>
            break;
 8000922:	e012      	b.n	800094a <menu2+0x5e>
            setCursor(&lcd, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	480a      	ldr	r0, [pc, #40]	@ (8000954 <menu2+0x68>)
 800092a:	f7ff fdbf 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   Amperimetro  ");
 800092e:	490c      	ldr	r1, [pc, #48]	@ (8000960 <menu2+0x74>)
 8000930:	4808      	ldr	r0, [pc, #32]	@ (8000954 <menu2+0x68>)
 8000932:	f7ff fcc3 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 8000936:	2201      	movs	r2, #1
 8000938:	2100      	movs	r1, #0
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <menu2+0x68>)
 800093c:	f7ff fdb6 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"    1.5 Amps    ");
 8000940:	4908      	ldr	r1, [pc, #32]	@ (8000964 <menu2+0x78>)
 8000942:	4804      	ldr	r0, [pc, #16]	@ (8000954 <menu2+0x68>)
 8000944:	f7ff fcba 	bl	80002bc <print>
            break;
 8000948:	bf00      	nop
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000004 	.word	0x20000004
 8000954:	20000088 	.word	0x20000088
 8000958:	080025ec 	.word	0x080025ec
 800095c:	080025b0 	.word	0x080025b0
 8000960:	08002600 	.word	0x08002600
 8000964:	08002614 	.word	0x08002614

08000968 <menu3>:

void menu3()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    switch (sub_menu)
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <menu3+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d002      	beq.n	800097a <menu3+0x12>
 8000974:	2b02      	cmp	r3, #2
 8000976:	d013      	beq.n	80009a0 <menu3+0x38>
            print(&lcd, (int8_t *)"   Ohmimetro    ");
            setCursor(&lcd, 0, 1);
            print(&lcd, (int8_t *)"    100 Ohms    ");
            break;
    }
}
 8000978:	e025      	b.n	80009c6 <menu3+0x5e>
            setCursor(&lcd, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	4814      	ldr	r0, [pc, #80]	@ (80009d0 <menu3+0x68>)
 8000980:	f7ff fd94 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"<  Ohmimetro   >");
 8000984:	4913      	ldr	r1, [pc, #76]	@ (80009d4 <menu3+0x6c>)
 8000986:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <menu3+0x68>)
 8000988:	f7ff fc98 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 800098c:	2201      	movs	r2, #1
 800098e:	2100      	movs	r1, #0
 8000990:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <menu3+0x68>)
 8000992:	f7ff fd8b 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"                ");
 8000996:	4910      	ldr	r1, [pc, #64]	@ (80009d8 <menu3+0x70>)
 8000998:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <menu3+0x68>)
 800099a:	f7ff fc8f 	bl	80002bc <print>
            break;
 800099e:	e012      	b.n	80009c6 <menu3+0x5e>
            setCursor(&lcd, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <menu3+0x68>)
 80009a6:	f7ff fd81 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   Ohmimetro    ");
 80009aa:	490c      	ldr	r1, [pc, #48]	@ (80009dc <menu3+0x74>)
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <menu3+0x68>)
 80009ae:	f7ff fc85 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2100      	movs	r1, #0
 80009b6:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <menu3+0x68>)
 80009b8:	f7ff fd78 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"    100 Ohms    ");
 80009bc:	4908      	ldr	r1, [pc, #32]	@ (80009e0 <menu3+0x78>)
 80009be:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <menu3+0x68>)
 80009c0:	f7ff fc7c 	bl	80002bc <print>
            break;
 80009c4:	bf00      	nop
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000004 	.word	0x20000004
 80009d0:	20000088 	.word	0x20000088
 80009d4:	08002628 	.word	0x08002628
 80009d8:	080025b0 	.word	0x080025b0
 80009dc:	0800263c 	.word	0x0800263c
 80009e0:	08002650 	.word	0x08002650

080009e4 <menu4>:

void menu4()

{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    switch (sub_menu)
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <menu4+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d002      	beq.n	80009f6 <menu4+0x12>
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d013      	beq.n	8000a1c <menu4+0x38>
            print(&lcd, (int8_t *)"   Wattimetro   ");
            setCursor(&lcd, 0, 1);
            print(&lcd, (int8_t *)"    55 Watts    ");
            break;
    }
}
 80009f4:	e025      	b.n	8000a42 <menu4+0x5e>
            setCursor(&lcd, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	4814      	ldr	r0, [pc, #80]	@ (8000a4c <menu4+0x68>)
 80009fc:	f7ff fd56 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"<  Wattimetro  >");
 8000a00:	4913      	ldr	r1, [pc, #76]	@ (8000a50 <menu4+0x6c>)
 8000a02:	4812      	ldr	r0, [pc, #72]	@ (8000a4c <menu4+0x68>)
 8000a04:	f7ff fc5a 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	480f      	ldr	r0, [pc, #60]	@ (8000a4c <menu4+0x68>)
 8000a0e:	f7ff fd4d 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"                ");
 8000a12:	4910      	ldr	r1, [pc, #64]	@ (8000a54 <menu4+0x70>)
 8000a14:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <menu4+0x68>)
 8000a16:	f7ff fc51 	bl	80002bc <print>
            break;
 8000a1a:	e012      	b.n	8000a42 <menu4+0x5e>
            setCursor(&lcd, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <menu4+0x68>)
 8000a22:	f7ff fd43 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   Wattimetro   ");
 8000a26:	490c      	ldr	r1, [pc, #48]	@ (8000a58 <menu4+0x74>)
 8000a28:	4808      	ldr	r0, [pc, #32]	@ (8000a4c <menu4+0x68>)
 8000a2a:	f7ff fc47 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2100      	movs	r1, #0
 8000a32:	4806      	ldr	r0, [pc, #24]	@ (8000a4c <menu4+0x68>)
 8000a34:	f7ff fd3a 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"    55 Watts    ");
 8000a38:	4908      	ldr	r1, [pc, #32]	@ (8000a5c <menu4+0x78>)
 8000a3a:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <menu4+0x68>)
 8000a3c:	f7ff fc3e 	bl	80002bc <print>
            break;
 8000a40:	bf00      	nop
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	20000088 	.word	0x20000088
 8000a50:	08002664 	.word	0x08002664
 8000a54:	080025b0 	.word	0x080025b0
 8000a58:	08002678 	.word	0x08002678
 8000a5c:	0800268c 	.word	0x0800268c

08000a60 <SystemClock_Config>:


//Configuração do relógio do sistema
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	@ 0x40
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	@ 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f8c4 	bl	8001bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a9e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fc95 	bl	80013d8 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f8ac 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 ff02 	bl	80018dc <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ade:	f000 f897 	bl	8000c10 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3740      	adds	r7, #64	@ 0x40
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <MX_GPIO_Init>:

/**
Função de inicialização GPIO
*/
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b00:	4b3f      	ldr	r3, [pc, #252]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a3e      	ldr	r2, [pc, #248]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0310 	and.w	r3, r3, #16
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b18:	4b39      	ldr	r3, [pc, #228]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a38      	ldr	r2, [pc, #224]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b1e:	f043 0320 	orr.w	r3, r3, #32
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b36      	ldr	r3, [pc, #216]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0320 	and.w	r3, r3, #32
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b33      	ldr	r3, [pc, #204]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a32      	ldr	r2, [pc, #200]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b30      	ldr	r3, [pc, #192]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b2a      	ldr	r3, [pc, #168]	@ (8000c00 <MX_GPIO_Init+0x114>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b66:	4827      	ldr	r0, [pc, #156]	@ (8000c04 <MX_GPIO_Init+0x118>)
 8000b68:	f000 fc1d 	bl	80013a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_E_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f246 1118 	movw	r1, #24856	@ 0x6118
 8000b72:	4825      	ldr	r0, [pc, #148]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000b74:	f000 fc17 	bl	80013a6 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b7e:	4823      	ldr	r0, [pc, #140]	@ (8000c0c <MX_GPIO_Init+0x120>)
 8000b80:	f000 fc11 	bl	80013a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_VERMELHO_Pin */
  GPIO_InitStruct.Pin = LED_VERMELHO_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_VERMELHO_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4819      	ldr	r0, [pc, #100]	@ (8000c04 <MX_GPIO_Init+0x118>)
 8000b9e:	f000 fa67 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DIR_Pin BT_CIMA_Pin BT_BAIXO_Pin BT_ESQ_Pin */
  GPIO_InitStruct.Pin = BT_DIR_Pin|BT_CIMA_Pin|BT_BAIXO_Pin|BT_ESQ_Pin;
 8000ba2:	2378      	movs	r3, #120	@ 0x78
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4815      	ldr	r0, [pc, #84]	@ (8000c0c <MX_GPIO_Init+0x120>)
 8000bb6:	f000 fa5b 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000bba:	f246 1318 	movw	r3, #24856	@ 0x6118
 8000bbe:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <MX_GPIO_Init+0x11c>)
 8000bd4:	f000 fa4c 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin;
 8000bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <MX_GPIO_Init+0x120>)
 8000bf2:	f000 fa3d 	bl	8001070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	40010800 	.word	0x40010800

08000c10 <Error_Handler>:

void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <Error_Handler+0x8>

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_MspInit+0x5c>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <HAL_MspInit+0x5c>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_MspInit+0x5c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <HAL_MspInit+0x5c>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c78 <HAL_MspInit+0x5c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <HAL_MspInit+0x5c>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_MspInit+0x60>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <HAL_MspInit+0x60>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8aa 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f000 ff80 	bl	8001c0c <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20005000 	.word	0x20005000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	20000090 	.word	0x20000090
 8000d40:	200001e0 	.word	0x200001e0

08000d44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d50:	f7ff fff8 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d56:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d58:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a09      	ldr	r2, [pc, #36]	@ (8000d90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d6c:	4c09      	ldr	r4, [pc, #36]	@ (8000d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f000 ff4d 	bl	8001c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fbc5 	bl	800050c <main>
  bx lr
 8000d82:	4770      	bx	lr
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d8c:	08002708 	.word	0x08002708
  ldr r2, =_sbss
 8000d90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d94:	200001e0 	.word	0x200001e0

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <HAL_Init+0x28>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <HAL_Init+0x28>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f92b 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff ff30 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f935 	bl	8001056 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f90b 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	@ (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000000c 	.word	0x2000000c
 8000e20:	20000014 	.word	0x20000014
 8000e24:	20000010 	.word	0x20000010

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a03      	ldr	r2, [pc, #12]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000014 	.word	0x20000014
 8000e48:	20000094 	.word	0x20000094

08000e4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b02      	ldr	r3, [pc, #8]	@ (8000e5c <HAL_GetTick+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000094 	.word	0x20000094

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff0 	bl	8000e4c <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffe0 	bl	8000e4c <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000014 	.word	0x20000014

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff90 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff49 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff5e 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff90 	bl	8000f60 <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5f 	bl	8000f0c <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffb0 	bl	8000fc4 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b08b      	sub	sp, #44	@ 0x2c
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e169      	b.n	8001358 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001084:	2201      	movs	r2, #1
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8158 	bne.w	8001352 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001310 <HAL_GPIO_Init+0x2a0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d05e      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010ac:	4a98      	ldr	r2, [pc, #608]	@ (8001310 <HAL_GPIO_Init+0x2a0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d875      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010b2:	4a98      	ldr	r2, [pc, #608]	@ (8001314 <HAL_GPIO_Init+0x2a4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d058      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010b8:	4a96      	ldr	r2, [pc, #600]	@ (8001314 <HAL_GPIO_Init+0x2a4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d86f      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010be:	4a96      	ldr	r2, [pc, #600]	@ (8001318 <HAL_GPIO_Init+0x2a8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d052      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010c4:	4a94      	ldr	r2, [pc, #592]	@ (8001318 <HAL_GPIO_Init+0x2a8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d869      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ca:	4a94      	ldr	r2, [pc, #592]	@ (800131c <HAL_GPIO_Init+0x2ac>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d04c      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010d0:	4a92      	ldr	r2, [pc, #584]	@ (800131c <HAL_GPIO_Init+0x2ac>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d863      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010d6:	4a92      	ldr	r2, [pc, #584]	@ (8001320 <HAL_GPIO_Init+0x2b0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d046      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010dc:	4a90      	ldr	r2, [pc, #576]	@ (8001320 <HAL_GPIO_Init+0x2b0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d85d      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	d82a      	bhi.n	800113c <HAL_GPIO_Init+0xcc>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d859      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ea:	a201      	add	r2, pc, #4	@ (adr r2, 80010f0 <HAL_GPIO_Init+0x80>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	0800116b 	.word	0x0800116b
 80010f4:	08001145 	.word	0x08001145
 80010f8:	08001157 	.word	0x08001157
 80010fc:	08001199 	.word	0x08001199
 8001100:	0800119f 	.word	0x0800119f
 8001104:	0800119f 	.word	0x0800119f
 8001108:	0800119f 	.word	0x0800119f
 800110c:	0800119f 	.word	0x0800119f
 8001110:	0800119f 	.word	0x0800119f
 8001114:	0800119f 	.word	0x0800119f
 8001118:	0800119f 	.word	0x0800119f
 800111c:	0800119f 	.word	0x0800119f
 8001120:	0800119f 	.word	0x0800119f
 8001124:	0800119f 	.word	0x0800119f
 8001128:	0800119f 	.word	0x0800119f
 800112c:	0800119f 	.word	0x0800119f
 8001130:	0800119f 	.word	0x0800119f
 8001134:	0800114d 	.word	0x0800114d
 8001138:	08001161 	.word	0x08001161
 800113c:	4a79      	ldr	r2, [pc, #484]	@ (8001324 <HAL_GPIO_Init+0x2b4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001142:	e02c      	b.n	800119e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e029      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	3304      	adds	r3, #4
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e024      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	3308      	adds	r3, #8
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e01f      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	330c      	adds	r3, #12
 8001166:	623b      	str	r3, [r7, #32]
          break;
 8001168:	e01a      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001172:	2304      	movs	r3, #4
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e013      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001180:	2308      	movs	r3, #8
 8001182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	611a      	str	r2, [r3, #16]
          break;
 800118a:	e009      	b.n	80011a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	615a      	str	r2, [r3, #20]
          break;
 8001196:	e003      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          break;
 800119e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2bff      	cmp	r3, #255	@ 0xff
 80011a4:	d801      	bhi.n	80011aa <HAL_GPIO_Init+0x13a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	e001      	b.n	80011ae <HAL_GPIO_Init+0x13e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2bff      	cmp	r3, #255	@ 0xff
 80011b4:	d802      	bhi.n	80011bc <HAL_GPIO_Init+0x14c>
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	e002      	b.n	80011c2 <HAL_GPIO_Init+0x152>
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	3b08      	subs	r3, #8
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	210f      	movs	r1, #15
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	6a39      	ldr	r1, [r7, #32]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	431a      	orrs	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80b1 	beq.w	8001352 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001328 <HAL_GPIO_Init+0x2b8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_GPIO_Init+0x2b8>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001328 <HAL_GPIO_Init+0x2b8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001208:	4a48      	ldr	r2, [pc, #288]	@ (800132c <HAL_GPIO_Init+0x2bc>)
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a40      	ldr	r2, [pc, #256]	@ (8001330 <HAL_GPIO_Init+0x2c0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d013      	beq.n	800125c <HAL_GPIO_Init+0x1ec>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3f      	ldr	r2, [pc, #252]	@ (8001334 <HAL_GPIO_Init+0x2c4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d00d      	beq.n	8001258 <HAL_GPIO_Init+0x1e8>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3e      	ldr	r2, [pc, #248]	@ (8001338 <HAL_GPIO_Init+0x2c8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d007      	beq.n	8001254 <HAL_GPIO_Init+0x1e4>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3d      	ldr	r2, [pc, #244]	@ (800133c <HAL_GPIO_Init+0x2cc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_GPIO_Init+0x1e0>
 800124c:	2303      	movs	r3, #3
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001250:	2304      	movs	r3, #4
 8001252:	e004      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_GPIO_Init+0x1ee>
 800125c:	2300      	movs	r3, #0
 800125e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001260:	f002 0203 	and.w	r2, r2, #3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4093      	lsls	r3, r2
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800126e:	492f      	ldr	r1, [pc, #188]	@ (800132c <HAL_GPIO_Init+0x2bc>)
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001288:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	492c      	ldr	r1, [pc, #176]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	608b      	str	r3, [r1, #8]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001296:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	4928      	ldr	r1, [pc, #160]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b0:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	4922      	ldr	r1, [pc, #136]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	60cb      	str	r3, [r1, #12]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	491e      	ldr	r1, [pc, #120]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4918      	ldr	r1, [pc, #96]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4914      	ldr	r1, [pc, #80]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d021      	beq.n	8001344 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	490e      	ldr	r1, [pc, #56]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
 800130c:	e021      	b.n	8001352 <HAL_GPIO_Init+0x2e2>
 800130e:	bf00      	nop
 8001310:	10320000 	.word	0x10320000
 8001314:	10310000 	.word	0x10310000
 8001318:	10220000 	.word	0x10220000
 800131c:	10210000 	.word	0x10210000
 8001320:	10120000 	.word	0x10120000
 8001324:	10110000 	.word	0x10110000
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	40010800 	.word	0x40010800
 8001334:	40010c00 	.word	0x40010c00
 8001338:	40011000 	.word	0x40011000
 800133c:	40011400 	.word	0x40011400
 8001340:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <HAL_GPIO_Init+0x304>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	43db      	mvns	r3, r3
 800134c:	4909      	ldr	r1, [pc, #36]	@ (8001374 <HAL_GPIO_Init+0x304>)
 800134e:	4013      	ands	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	3301      	adds	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	f47f ae8e 	bne.w	8001084 <HAL_GPIO_Init+0x14>
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	372c      	adds	r7, #44	@ 0x2c
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e001      	b.n	800139a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]
 80013b2:	4613      	mov	r3, r2
 80013b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b6:	787b      	ldrb	r3, [r7, #1]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013bc:	887a      	ldrh	r2, [r7, #2]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013c2:	e003      	b.n	80013cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	041a      	lsls	r2, r3, #16
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	611a      	str	r2, [r3, #16]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e272      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8087 	beq.w	8001506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f8:	4b92      	ldr	r3, [pc, #584]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b04      	cmp	r3, #4
 8001402:	d00c      	beq.n	800141e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001404:	4b8f      	ldr	r3, [pc, #572]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 030c 	and.w	r3, r3, #12
 800140c:	2b08      	cmp	r3, #8
 800140e:	d112      	bne.n	8001436 <HAL_RCC_OscConfig+0x5e>
 8001410:	4b8c      	ldr	r3, [pc, #560]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800141c:	d10b      	bne.n	8001436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141e:	4b89      	ldr	r3, [pc, #548]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d06c      	beq.n	8001504 <HAL_RCC_OscConfig+0x12c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d168      	bne.n	8001504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e24c      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x76>
 8001440:	4b80      	ldr	r3, [pc, #512]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a7f      	ldr	r2, [pc, #508]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e02e      	b.n	80014ac <HAL_RCC_OscConfig+0xd4>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x98>
 8001456:	4b7b      	ldr	r3, [pc, #492]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a7a      	ldr	r2, [pc, #488]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 800145c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b78      	ldr	r3, [pc, #480]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a77      	ldr	r2, [pc, #476]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001468:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e01d      	b.n	80014ac <HAL_RCC_OscConfig+0xd4>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0xbc>
 800147a:	4b72      	ldr	r3, [pc, #456]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a71      	ldr	r2, [pc, #452]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b6f      	ldr	r3, [pc, #444]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a6e      	ldr	r2, [pc, #440]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0xd4>
 8001494:	4b6b      	ldr	r3, [pc, #428]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a6a      	ldr	r2, [pc, #424]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b68      	ldr	r3, [pc, #416]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a67      	ldr	r2, [pc, #412]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fcca 	bl	8000e4c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fcc6 	bl	8000e4c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	@ 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e200      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0xe4>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fcb6 	bl	8000e4c <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fcb2 	bl	8000e4c <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	@ 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1ec      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f6:	4b53      	ldr	r3, [pc, #332]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x10c>
 8001502:	e000      	b.n	8001506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d063      	beq.n	80015da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001512:	4b4c      	ldr	r3, [pc, #304]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800151e:	4b49      	ldr	r3, [pc, #292]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b08      	cmp	r3, #8
 8001528:	d11c      	bne.n	8001564 <HAL_RCC_OscConfig+0x18c>
 800152a:	4b46      	ldr	r3, [pc, #280]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	4b43      	ldr	r3, [pc, #268]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x176>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e1c0      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4939      	ldr	r1, [pc, #228]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	e03a      	b.n	80015da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156c:	4b36      	ldr	r3, [pc, #216]	@ (8001648 <HAL_RCC_OscConfig+0x270>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fc6b 	bl	8000e4c <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fc67 	bl	8000e4c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1a1      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	4b2d      	ldr	r3, [pc, #180]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b2a      	ldr	r3, [pc, #168]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4927      	ldr	r1, [pc, #156]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
 80015ac:	e015      	b.n	80015da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <HAL_RCC_OscConfig+0x270>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fc4a 	bl	8000e4c <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fc46 	bl	8000e4c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e180      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d03a      	beq.n	800165c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d019      	beq.n	8001622 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <HAL_RCC_OscConfig+0x274>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f4:	f7ff fc2a 	bl	8000e4c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc26 	bl	8000e4c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e160      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_RCC_OscConfig+0x26c>)
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800161a:	2001      	movs	r0, #1
 800161c:	f000 fa9c 	bl	8001b58 <RCC_Delay>
 8001620:	e01c      	b.n	800165c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <HAL_RCC_OscConfig+0x274>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fc10 	bl	8000e4c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162e:	e00f      	b.n	8001650 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fc0c 	bl	8000e4c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d908      	bls.n	8001650 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e146      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	42420000 	.word	0x42420000
 800164c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	4b92      	ldr	r3, [pc, #584]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1e9      	bne.n	8001630 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80a6 	beq.w	80017b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166e:	4b8b      	ldr	r3, [pc, #556]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10d      	bne.n	8001696 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b88      	ldr	r3, [pc, #544]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4a87      	ldr	r2, [pc, #540]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001684:	61d3      	str	r3, [r2, #28]
 8001686:	4b85      	ldr	r3, [pc, #532]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001692:	2301      	movs	r3, #1
 8001694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001696:	4b82      	ldr	r3, [pc, #520]	@ (80018a0 <HAL_RCC_OscConfig+0x4c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a2:	4b7f      	ldr	r3, [pc, #508]	@ (80018a0 <HAL_RCC_OscConfig+0x4c8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7e      	ldr	r2, [pc, #504]	@ (80018a0 <HAL_RCC_OscConfig+0x4c8>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fbcd 	bl	8000e4c <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b6:	f7ff fbc9 	bl	8000e4c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b64      	cmp	r3, #100	@ 0x64
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e103      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <HAL_RCC_OscConfig+0x4c8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x312>
 80016dc:	4b6f      	ldr	r3, [pc, #444]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a6e      	ldr	r2, [pc, #440]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	e02d      	b.n	8001746 <HAL_RCC_OscConfig+0x36e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x334>
 80016f2:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a69      	ldr	r2, [pc, #420]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	4b67      	ldr	r3, [pc, #412]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a66      	ldr	r2, [pc, #408]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6213      	str	r3, [r2, #32]
 800170a:	e01c      	b.n	8001746 <HAL_RCC_OscConfig+0x36e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x356>
 8001714:	4b61      	ldr	r3, [pc, #388]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a60      	ldr	r2, [pc, #384]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	4b5e      	ldr	r3, [pc, #376]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a5d      	ldr	r2, [pc, #372]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0x36e>
 800172e:	4b5b      	ldr	r3, [pc, #364]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a5a      	ldr	r2, [pc, #360]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	6213      	str	r3, [r2, #32]
 800173a:	4b58      	ldr	r3, [pc, #352]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a57      	ldr	r2, [pc, #348]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001740:	f023 0304 	bic.w	r3, r3, #4
 8001744:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fb7d 	bl	8000e4c <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fb79 	bl	8000e4c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0b1      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176c:	4b4b      	ldr	r3, [pc, #300]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ee      	beq.n	8001756 <HAL_RCC_OscConfig+0x37e>
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff fb67 	bl	8000e4c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fb63 	bl	8000e4c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e09b      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001798:	4b40      	ldr	r3, [pc, #256]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ee      	bne.n	8001782 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d105      	bne.n	80017b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017aa:	4b3c      	ldr	r3, [pc, #240]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a3b      	ldr	r2, [pc, #236]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c0:	4b36      	ldr	r3, [pc, #216]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d061      	beq.n	8001890 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d146      	bne.n	8001862 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d4:	4b33      	ldr	r3, [pc, #204]	@ (80018a4 <HAL_RCC_OscConfig+0x4cc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fb37 	bl	8000e4c <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e2:	f7ff fb33 	bl	8000e4c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e06d      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f4:	4b29      	ldr	r3, [pc, #164]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001808:	d108      	bne.n	800181c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800180a:	4b24      	ldr	r3, [pc, #144]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	4921      	ldr	r1, [pc, #132]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a19      	ldr	r1, [r3, #32]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	430b      	orrs	r3, r1
 800182e:	491b      	ldr	r1, [pc, #108]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_RCC_OscConfig+0x4cc>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fb07 	bl	8000e4c <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff fb03 	bl	8000e4c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e03d      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x46a>
 8001860:	e035      	b.n	80018ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_RCC_OscConfig+0x4cc>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff faf0 	bl	8000e4c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff faec 	bl	8000e4c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e026      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_RCC_OscConfig+0x4c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x498>
 800188e:	e01e      	b.n	80018ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e019      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
 800189c:	40021000 	.word	0x40021000
 80018a0:	40007000 	.word	0x40007000
 80018a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HAL_RCC_OscConfig+0x500>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0d0      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d910      	bls.n	8001920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b67      	ldr	r3, [pc, #412]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0207 	bic.w	r2, r3, #7
 8001906:	4965      	ldr	r1, [pc, #404]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b63      	ldr	r3, [pc, #396]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0b8      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001938:	4b59      	ldr	r3, [pc, #356]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a58      	ldr	r2, [pc, #352]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001942:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001950:	4b53      	ldr	r3, [pc, #332]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a52      	ldr	r2, [pc, #328]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800195a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b50      	ldr	r3, [pc, #320]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	494d      	ldr	r1, [pc, #308]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d040      	beq.n	80019fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b47      	ldr	r3, [pc, #284]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d115      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e07f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b41      	ldr	r3, [pc, #260]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e073      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e06b      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ba:	4b39      	ldr	r3, [pc, #228]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f023 0203 	bic.w	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4936      	ldr	r1, [pc, #216]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff fa3e 	bl	8000e4c <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7ff fa3a 	bl	8000e4c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e053      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 020c 	and.w	r2, r3, #12
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1eb      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019fc:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d210      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 0207 	bic.w	r2, r3, #7
 8001a12:	4922      	ldr	r1, [pc, #136]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b20      	ldr	r3, [pc, #128]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e032      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4916      	ldr	r1, [pc, #88]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	490e      	ldr	r1, [pc, #56]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a6a:	f000 f821 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	490a      	ldr	r1, [pc, #40]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	5ccb      	ldrb	r3, [r1, r3]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	4a09      	ldr	r2, [pc, #36]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8001a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_RCC_ClockConfig+0x1d0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f99c 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	080026a0 	.word	0x080026a0
 8001aa8:	2000000c 	.word	0x2000000c
 8001aac:	20000010 	.word	0x20000010

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x30>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x36>
 8001ade:	e027      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ae2:	613b      	str	r3, [r7, #16]
      break;
 8001ae4:	e027      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	0c9b      	lsrs	r3, r3, #18
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d010      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0c5b      	lsrs	r3, r3, #17
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b12:	fb03 f202 	mul.w	r2, r3, r2
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e004      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a0c      	ldr	r2, [pc, #48]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b24:	fb02 f303 	mul.w	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	613b      	str	r3, [r7, #16]
      break;
 8001b2e:	e002      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b32:	613b      	str	r3, [r7, #16]
      break;
 8001b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b36:	693b      	ldr	r3, [r7, #16]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	007a1200 	.word	0x007a1200
 8001b4c:	080026b0 	.word	0x080026b0
 8001b50:	080026c0 	.word	0x080026c0
 8001b54:	003d0900 	.word	0x003d0900

08001b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b60:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <RCC_Delay+0x34>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <RCC_Delay+0x38>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0a5b      	lsrs	r3, r3, #9
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b74:	bf00      	nop
  }
  while (Delay --);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1e5a      	subs	r2, r3, #1
 8001b7a:	60fa      	str	r2, [r7, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f9      	bne.n	8001b74 <RCC_Delay+0x1c>
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	2000000c 	.word	0x2000000c
 8001b90:	10624dd3 	.word	0x10624dd3

08001b94 <sniprintf>:
 8001b94:	b40c      	push	{r2, r3}
 8001b96:	b530      	push	{r4, r5, lr}
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <sniprintf+0x64>)
 8001b9a:	1e0c      	subs	r4, r1, #0
 8001b9c:	681d      	ldr	r5, [r3, #0]
 8001b9e:	b09d      	sub	sp, #116	@ 0x74
 8001ba0:	da08      	bge.n	8001bb4 <sniprintf+0x20>
 8001ba2:	238b      	movs	r3, #139	@ 0x8b
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	602b      	str	r3, [r5, #0]
 8001baa:	b01d      	add	sp, #116	@ 0x74
 8001bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001bb0:	b002      	add	sp, #8
 8001bb2:	4770      	bx	lr
 8001bb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001bb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001bbc:	bf0c      	ite	eq
 8001bbe:	4623      	moveq	r3, r4
 8001bc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001bc4:	9304      	str	r3, [sp, #16]
 8001bc6:	9307      	str	r3, [sp, #28]
 8001bc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bcc:	9002      	str	r0, [sp, #8]
 8001bce:	9006      	str	r0, [sp, #24]
 8001bd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	ab21      	add	r3, sp, #132	@ 0x84
 8001bd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8001bda:	a902      	add	r1, sp, #8
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	f000 f993 	bl	8001f08 <_svfiprintf_r>
 8001be2:	1c43      	adds	r3, r0, #1
 8001be4:	bfbc      	itt	lt
 8001be6:	238b      	movlt	r3, #139	@ 0x8b
 8001be8:	602b      	strlt	r3, [r5, #0]
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	d0dd      	beq.n	8001baa <sniprintf+0x16>
 8001bee:	2200      	movs	r2, #0
 8001bf0:	9b02      	ldr	r3, [sp, #8]
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	e7d9      	b.n	8001baa <sniprintf+0x16>
 8001bf6:	bf00      	nop
 8001bf8:	20000018 	.word	0x20000018

08001bfc <memset>:
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4402      	add	r2, r0
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d100      	bne.n	8001c06 <memset+0xa>
 8001c04:	4770      	bx	lr
 8001c06:	f803 1b01 	strb.w	r1, [r3], #1
 8001c0a:	e7f9      	b.n	8001c00 <memset+0x4>

08001c0c <__errno>:
 8001c0c:	4b01      	ldr	r3, [pc, #4]	@ (8001c14 <__errno+0x8>)
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000018 	.word	0x20000018

08001c18 <__libc_init_array>:
 8001c18:	b570      	push	{r4, r5, r6, lr}
 8001c1a:	2600      	movs	r6, #0
 8001c1c:	4d0c      	ldr	r5, [pc, #48]	@ (8001c50 <__libc_init_array+0x38>)
 8001c1e:	4c0d      	ldr	r4, [pc, #52]	@ (8001c54 <__libc_init_array+0x3c>)
 8001c20:	1b64      	subs	r4, r4, r5
 8001c22:	10a4      	asrs	r4, r4, #2
 8001c24:	42a6      	cmp	r6, r4
 8001c26:	d109      	bne.n	8001c3c <__libc_init_array+0x24>
 8001c28:	f000 fc78 	bl	800251c <_init>
 8001c2c:	2600      	movs	r6, #0
 8001c2e:	4d0a      	ldr	r5, [pc, #40]	@ (8001c58 <__libc_init_array+0x40>)
 8001c30:	4c0a      	ldr	r4, [pc, #40]	@ (8001c5c <__libc_init_array+0x44>)
 8001c32:	1b64      	subs	r4, r4, r5
 8001c34:	10a4      	asrs	r4, r4, #2
 8001c36:	42a6      	cmp	r6, r4
 8001c38:	d105      	bne.n	8001c46 <__libc_init_array+0x2e>
 8001c3a:	bd70      	pop	{r4, r5, r6, pc}
 8001c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c40:	4798      	blx	r3
 8001c42:	3601      	adds	r6, #1
 8001c44:	e7ee      	b.n	8001c24 <__libc_init_array+0xc>
 8001c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c4a:	4798      	blx	r3
 8001c4c:	3601      	adds	r6, #1
 8001c4e:	e7f2      	b.n	8001c36 <__libc_init_array+0x1e>
 8001c50:	08002700 	.word	0x08002700
 8001c54:	08002700 	.word	0x08002700
 8001c58:	08002700 	.word	0x08002700
 8001c5c:	08002704 	.word	0x08002704

08001c60 <__retarget_lock_acquire_recursive>:
 8001c60:	4770      	bx	lr

08001c62 <__retarget_lock_release_recursive>:
 8001c62:	4770      	bx	lr

08001c64 <_free_r>:
 8001c64:	b538      	push	{r3, r4, r5, lr}
 8001c66:	4605      	mov	r5, r0
 8001c68:	2900      	cmp	r1, #0
 8001c6a:	d040      	beq.n	8001cee <_free_r+0x8a>
 8001c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c70:	1f0c      	subs	r4, r1, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bfb8      	it	lt
 8001c76:	18e4      	addlt	r4, r4, r3
 8001c78:	f000 f8de 	bl	8001e38 <__malloc_lock>
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf0 <_free_r+0x8c>)
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	b933      	cbnz	r3, 8001c90 <_free_r+0x2c>
 8001c82:	6063      	str	r3, [r4, #4]
 8001c84:	6014      	str	r4, [r2, #0]
 8001c86:	4628      	mov	r0, r5
 8001c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c8c:	f000 b8da 	b.w	8001e44 <__malloc_unlock>
 8001c90:	42a3      	cmp	r3, r4
 8001c92:	d908      	bls.n	8001ca6 <_free_r+0x42>
 8001c94:	6820      	ldr	r0, [r4, #0]
 8001c96:	1821      	adds	r1, r4, r0
 8001c98:	428b      	cmp	r3, r1
 8001c9a:	bf01      	itttt	eq
 8001c9c:	6819      	ldreq	r1, [r3, #0]
 8001c9e:	685b      	ldreq	r3, [r3, #4]
 8001ca0:	1809      	addeq	r1, r1, r0
 8001ca2:	6021      	streq	r1, [r4, #0]
 8001ca4:	e7ed      	b.n	8001c82 <_free_r+0x1e>
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	b10b      	cbz	r3, 8001cb0 <_free_r+0x4c>
 8001cac:	42a3      	cmp	r3, r4
 8001cae:	d9fa      	bls.n	8001ca6 <_free_r+0x42>
 8001cb0:	6811      	ldr	r1, [r2, #0]
 8001cb2:	1850      	adds	r0, r2, r1
 8001cb4:	42a0      	cmp	r0, r4
 8001cb6:	d10b      	bne.n	8001cd0 <_free_r+0x6c>
 8001cb8:	6820      	ldr	r0, [r4, #0]
 8001cba:	4401      	add	r1, r0
 8001cbc:	1850      	adds	r0, r2, r1
 8001cbe:	4283      	cmp	r3, r0
 8001cc0:	6011      	str	r1, [r2, #0]
 8001cc2:	d1e0      	bne.n	8001c86 <_free_r+0x22>
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4408      	add	r0, r1
 8001cca:	6010      	str	r0, [r2, #0]
 8001ccc:	6053      	str	r3, [r2, #4]
 8001cce:	e7da      	b.n	8001c86 <_free_r+0x22>
 8001cd0:	d902      	bls.n	8001cd8 <_free_r+0x74>
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	602b      	str	r3, [r5, #0]
 8001cd6:	e7d6      	b.n	8001c86 <_free_r+0x22>
 8001cd8:	6820      	ldr	r0, [r4, #0]
 8001cda:	1821      	adds	r1, r4, r0
 8001cdc:	428b      	cmp	r3, r1
 8001cde:	bf01      	itttt	eq
 8001ce0:	6819      	ldreq	r1, [r3, #0]
 8001ce2:	685b      	ldreq	r3, [r3, #4]
 8001ce4:	1809      	addeq	r1, r1, r0
 8001ce6:	6021      	streq	r1, [r4, #0]
 8001ce8:	6063      	str	r3, [r4, #4]
 8001cea:	6054      	str	r4, [r2, #4]
 8001cec:	e7cb      	b.n	8001c86 <_free_r+0x22>
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	200001dc 	.word	0x200001dc

08001cf4 <sbrk_aligned>:
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8001d34 <sbrk_aligned+0x40>)
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	6831      	ldr	r1, [r6, #0]
 8001cfc:	4605      	mov	r5, r0
 8001cfe:	b911      	cbnz	r1, 8001d06 <sbrk_aligned+0x12>
 8001d00:	f000 fbaa 	bl	8002458 <_sbrk_r>
 8001d04:	6030      	str	r0, [r6, #0]
 8001d06:	4621      	mov	r1, r4
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f000 fba5 	bl	8002458 <_sbrk_r>
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	d103      	bne.n	8001d1a <sbrk_aligned+0x26>
 8001d12:	f04f 34ff 	mov.w	r4, #4294967295
 8001d16:	4620      	mov	r0, r4
 8001d18:	bd70      	pop	{r4, r5, r6, pc}
 8001d1a:	1cc4      	adds	r4, r0, #3
 8001d1c:	f024 0403 	bic.w	r4, r4, #3
 8001d20:	42a0      	cmp	r0, r4
 8001d22:	d0f8      	beq.n	8001d16 <sbrk_aligned+0x22>
 8001d24:	1a21      	subs	r1, r4, r0
 8001d26:	4628      	mov	r0, r5
 8001d28:	f000 fb96 	bl	8002458 <_sbrk_r>
 8001d2c:	3001      	adds	r0, #1
 8001d2e:	d1f2      	bne.n	8001d16 <sbrk_aligned+0x22>
 8001d30:	e7ef      	b.n	8001d12 <sbrk_aligned+0x1e>
 8001d32:	bf00      	nop
 8001d34:	200001d8 	.word	0x200001d8

08001d38 <_malloc_r>:
 8001d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d3c:	1ccd      	adds	r5, r1, #3
 8001d3e:	f025 0503 	bic.w	r5, r5, #3
 8001d42:	3508      	adds	r5, #8
 8001d44:	2d0c      	cmp	r5, #12
 8001d46:	bf38      	it	cc
 8001d48:	250c      	movcc	r5, #12
 8001d4a:	2d00      	cmp	r5, #0
 8001d4c:	4606      	mov	r6, r0
 8001d4e:	db01      	blt.n	8001d54 <_malloc_r+0x1c>
 8001d50:	42a9      	cmp	r1, r5
 8001d52:	d904      	bls.n	8001d5e <_malloc_r+0x26>
 8001d54:	230c      	movs	r3, #12
 8001d56:	6033      	str	r3, [r6, #0]
 8001d58:	2000      	movs	r0, #0
 8001d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e34 <_malloc_r+0xfc>
 8001d62:	f000 f869 	bl	8001e38 <__malloc_lock>
 8001d66:	f8d8 3000 	ldr.w	r3, [r8]
 8001d6a:	461c      	mov	r4, r3
 8001d6c:	bb44      	cbnz	r4, 8001dc0 <_malloc_r+0x88>
 8001d6e:	4629      	mov	r1, r5
 8001d70:	4630      	mov	r0, r6
 8001d72:	f7ff ffbf 	bl	8001cf4 <sbrk_aligned>
 8001d76:	1c43      	adds	r3, r0, #1
 8001d78:	4604      	mov	r4, r0
 8001d7a:	d158      	bne.n	8001e2e <_malloc_r+0xf6>
 8001d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8001d80:	4627      	mov	r7, r4
 8001d82:	2f00      	cmp	r7, #0
 8001d84:	d143      	bne.n	8001e0e <_malloc_r+0xd6>
 8001d86:	2c00      	cmp	r4, #0
 8001d88:	d04b      	beq.n	8001e22 <_malloc_r+0xea>
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	4639      	mov	r1, r7
 8001d8e:	4630      	mov	r0, r6
 8001d90:	eb04 0903 	add.w	r9, r4, r3
 8001d94:	f000 fb60 	bl	8002458 <_sbrk_r>
 8001d98:	4581      	cmp	r9, r0
 8001d9a:	d142      	bne.n	8001e22 <_malloc_r+0xea>
 8001d9c:	6821      	ldr	r1, [r4, #0]
 8001d9e:	4630      	mov	r0, r6
 8001da0:	1a6d      	subs	r5, r5, r1
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7ff ffa6 	bl	8001cf4 <sbrk_aligned>
 8001da8:	3001      	adds	r0, #1
 8001daa:	d03a      	beq.n	8001e22 <_malloc_r+0xea>
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	442b      	add	r3, r5
 8001db0:	6023      	str	r3, [r4, #0]
 8001db2:	f8d8 3000 	ldr.w	r3, [r8]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	bb62      	cbnz	r2, 8001e14 <_malloc_r+0xdc>
 8001dba:	f8c8 7000 	str.w	r7, [r8]
 8001dbe:	e00f      	b.n	8001de0 <_malloc_r+0xa8>
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	1b52      	subs	r2, r2, r5
 8001dc4:	d420      	bmi.n	8001e08 <_malloc_r+0xd0>
 8001dc6:	2a0b      	cmp	r2, #11
 8001dc8:	d917      	bls.n	8001dfa <_malloc_r+0xc2>
 8001dca:	1961      	adds	r1, r4, r5
 8001dcc:	42a3      	cmp	r3, r4
 8001dce:	6025      	str	r5, [r4, #0]
 8001dd0:	bf18      	it	ne
 8001dd2:	6059      	strne	r1, [r3, #4]
 8001dd4:	6863      	ldr	r3, [r4, #4]
 8001dd6:	bf08      	it	eq
 8001dd8:	f8c8 1000 	streq.w	r1, [r8]
 8001ddc:	5162      	str	r2, [r4, r5]
 8001dde:	604b      	str	r3, [r1, #4]
 8001de0:	4630      	mov	r0, r6
 8001de2:	f000 f82f 	bl	8001e44 <__malloc_unlock>
 8001de6:	f104 000b 	add.w	r0, r4, #11
 8001dea:	1d23      	adds	r3, r4, #4
 8001dec:	f020 0007 	bic.w	r0, r0, #7
 8001df0:	1ac2      	subs	r2, r0, r3
 8001df2:	bf1c      	itt	ne
 8001df4:	1a1b      	subne	r3, r3, r0
 8001df6:	50a3      	strne	r3, [r4, r2]
 8001df8:	e7af      	b.n	8001d5a <_malloc_r+0x22>
 8001dfa:	6862      	ldr	r2, [r4, #4]
 8001dfc:	42a3      	cmp	r3, r4
 8001dfe:	bf0c      	ite	eq
 8001e00:	f8c8 2000 	streq.w	r2, [r8]
 8001e04:	605a      	strne	r2, [r3, #4]
 8001e06:	e7eb      	b.n	8001de0 <_malloc_r+0xa8>
 8001e08:	4623      	mov	r3, r4
 8001e0a:	6864      	ldr	r4, [r4, #4]
 8001e0c:	e7ae      	b.n	8001d6c <_malloc_r+0x34>
 8001e0e:	463c      	mov	r4, r7
 8001e10:	687f      	ldr	r7, [r7, #4]
 8001e12:	e7b6      	b.n	8001d82 <_malloc_r+0x4a>
 8001e14:	461a      	mov	r2, r3
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	42a3      	cmp	r3, r4
 8001e1a:	d1fb      	bne.n	8001e14 <_malloc_r+0xdc>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	6053      	str	r3, [r2, #4]
 8001e20:	e7de      	b.n	8001de0 <_malloc_r+0xa8>
 8001e22:	230c      	movs	r3, #12
 8001e24:	4630      	mov	r0, r6
 8001e26:	6033      	str	r3, [r6, #0]
 8001e28:	f000 f80c 	bl	8001e44 <__malloc_unlock>
 8001e2c:	e794      	b.n	8001d58 <_malloc_r+0x20>
 8001e2e:	6005      	str	r5, [r0, #0]
 8001e30:	e7d6      	b.n	8001de0 <_malloc_r+0xa8>
 8001e32:	bf00      	nop
 8001e34:	200001dc 	.word	0x200001dc

08001e38 <__malloc_lock>:
 8001e38:	4801      	ldr	r0, [pc, #4]	@ (8001e40 <__malloc_lock+0x8>)
 8001e3a:	f7ff bf11 	b.w	8001c60 <__retarget_lock_acquire_recursive>
 8001e3e:	bf00      	nop
 8001e40:	200001d4 	.word	0x200001d4

08001e44 <__malloc_unlock>:
 8001e44:	4801      	ldr	r0, [pc, #4]	@ (8001e4c <__malloc_unlock+0x8>)
 8001e46:	f7ff bf0c 	b.w	8001c62 <__retarget_lock_release_recursive>
 8001e4a:	bf00      	nop
 8001e4c:	200001d4 	.word	0x200001d4

08001e50 <__ssputs_r>:
 8001e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e54:	461f      	mov	r7, r3
 8001e56:	688e      	ldr	r6, [r1, #8]
 8001e58:	4682      	mov	sl, r0
 8001e5a:	42be      	cmp	r6, r7
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	4690      	mov	r8, r2
 8001e60:	680b      	ldr	r3, [r1, #0]
 8001e62:	d82d      	bhi.n	8001ec0 <__ssputs_r+0x70>
 8001e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001e6c:	d026      	beq.n	8001ebc <__ssputs_r+0x6c>
 8001e6e:	6965      	ldr	r5, [r4, #20]
 8001e70:	6909      	ldr	r1, [r1, #16]
 8001e72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e76:	eba3 0901 	sub.w	r9, r3, r1
 8001e7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e7e:	1c7b      	adds	r3, r7, #1
 8001e80:	444b      	add	r3, r9
 8001e82:	106d      	asrs	r5, r5, #1
 8001e84:	429d      	cmp	r5, r3
 8001e86:	bf38      	it	cc
 8001e88:	461d      	movcc	r5, r3
 8001e8a:	0553      	lsls	r3, r2, #21
 8001e8c:	d527      	bpl.n	8001ede <__ssputs_r+0x8e>
 8001e8e:	4629      	mov	r1, r5
 8001e90:	f7ff ff52 	bl	8001d38 <_malloc_r>
 8001e94:	4606      	mov	r6, r0
 8001e96:	b360      	cbz	r0, 8001ef2 <__ssputs_r+0xa2>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	6921      	ldr	r1, [r4, #16]
 8001e9c:	f000 fafa 	bl	8002494 <memcpy>
 8001ea0:	89a3      	ldrh	r3, [r4, #12]
 8001ea2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eaa:	81a3      	strh	r3, [r4, #12]
 8001eac:	6126      	str	r6, [r4, #16]
 8001eae:	444e      	add	r6, r9
 8001eb0:	6026      	str	r6, [r4, #0]
 8001eb2:	463e      	mov	r6, r7
 8001eb4:	6165      	str	r5, [r4, #20]
 8001eb6:	eba5 0509 	sub.w	r5, r5, r9
 8001eba:	60a5      	str	r5, [r4, #8]
 8001ebc:	42be      	cmp	r6, r7
 8001ebe:	d900      	bls.n	8001ec2 <__ssputs_r+0x72>
 8001ec0:	463e      	mov	r6, r7
 8001ec2:	4632      	mov	r2, r6
 8001ec4:	4641      	mov	r1, r8
 8001ec6:	6820      	ldr	r0, [r4, #0]
 8001ec8:	f000 faac 	bl	8002424 <memmove>
 8001ecc:	2000      	movs	r0, #0
 8001ece:	68a3      	ldr	r3, [r4, #8]
 8001ed0:	1b9b      	subs	r3, r3, r6
 8001ed2:	60a3      	str	r3, [r4, #8]
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	4433      	add	r3, r6
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ede:	462a      	mov	r2, r5
 8001ee0:	f000 fae6 	bl	80024b0 <_realloc_r>
 8001ee4:	4606      	mov	r6, r0
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d1e0      	bne.n	8001eac <__ssputs_r+0x5c>
 8001eea:	4650      	mov	r0, sl
 8001eec:	6921      	ldr	r1, [r4, #16]
 8001eee:	f7ff feb9 	bl	8001c64 <_free_r>
 8001ef2:	230c      	movs	r3, #12
 8001ef4:	f8ca 3000 	str.w	r3, [sl]
 8001ef8:	89a3      	ldrh	r3, [r4, #12]
 8001efa:	f04f 30ff 	mov.w	r0, #4294967295
 8001efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f02:	81a3      	strh	r3, [r4, #12]
 8001f04:	e7e9      	b.n	8001eda <__ssputs_r+0x8a>
	...

08001f08 <_svfiprintf_r>:
 8001f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f0c:	4698      	mov	r8, r3
 8001f0e:	898b      	ldrh	r3, [r1, #12]
 8001f10:	4607      	mov	r7, r0
 8001f12:	061b      	lsls	r3, r3, #24
 8001f14:	460d      	mov	r5, r1
 8001f16:	4614      	mov	r4, r2
 8001f18:	b09d      	sub	sp, #116	@ 0x74
 8001f1a:	d510      	bpl.n	8001f3e <_svfiprintf_r+0x36>
 8001f1c:	690b      	ldr	r3, [r1, #16]
 8001f1e:	b973      	cbnz	r3, 8001f3e <_svfiprintf_r+0x36>
 8001f20:	2140      	movs	r1, #64	@ 0x40
 8001f22:	f7ff ff09 	bl	8001d38 <_malloc_r>
 8001f26:	6028      	str	r0, [r5, #0]
 8001f28:	6128      	str	r0, [r5, #16]
 8001f2a:	b930      	cbnz	r0, 8001f3a <_svfiprintf_r+0x32>
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	b01d      	add	sp, #116	@ 0x74
 8001f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f3a:	2340      	movs	r3, #64	@ 0x40
 8001f3c:	616b      	str	r3, [r5, #20]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f42:	2320      	movs	r3, #32
 8001f44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f48:	2330      	movs	r3, #48	@ 0x30
 8001f4a:	f04f 0901 	mov.w	r9, #1
 8001f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f52:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80020ec <_svfiprintf_r+0x1e4>
 8001f56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f5a:	4623      	mov	r3, r4
 8001f5c:	469a      	mov	sl, r3
 8001f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f62:	b10a      	cbz	r2, 8001f68 <_svfiprintf_r+0x60>
 8001f64:	2a25      	cmp	r2, #37	@ 0x25
 8001f66:	d1f9      	bne.n	8001f5c <_svfiprintf_r+0x54>
 8001f68:	ebba 0b04 	subs.w	fp, sl, r4
 8001f6c:	d00b      	beq.n	8001f86 <_svfiprintf_r+0x7e>
 8001f6e:	465b      	mov	r3, fp
 8001f70:	4622      	mov	r2, r4
 8001f72:	4629      	mov	r1, r5
 8001f74:	4638      	mov	r0, r7
 8001f76:	f7ff ff6b 	bl	8001e50 <__ssputs_r>
 8001f7a:	3001      	adds	r0, #1
 8001f7c:	f000 80a7 	beq.w	80020ce <_svfiprintf_r+0x1c6>
 8001f80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f82:	445a      	add	r2, fp
 8001f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f86:	f89a 3000 	ldrb.w	r3, [sl]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 809f 	beq.w	80020ce <_svfiprintf_r+0x1c6>
 8001f90:	2300      	movs	r3, #0
 8001f92:	f04f 32ff 	mov.w	r2, #4294967295
 8001f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f9a:	f10a 0a01 	add.w	sl, sl, #1
 8001f9e:	9304      	str	r3, [sp, #16]
 8001fa0:	9307      	str	r3, [sp, #28]
 8001fa2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001fa6:	931a      	str	r3, [sp, #104]	@ 0x68
 8001fa8:	4654      	mov	r4, sl
 8001faa:	2205      	movs	r2, #5
 8001fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fb0:	484e      	ldr	r0, [pc, #312]	@ (80020ec <_svfiprintf_r+0x1e4>)
 8001fb2:	f000 fa61 	bl	8002478 <memchr>
 8001fb6:	9a04      	ldr	r2, [sp, #16]
 8001fb8:	b9d8      	cbnz	r0, 8001ff2 <_svfiprintf_r+0xea>
 8001fba:	06d0      	lsls	r0, r2, #27
 8001fbc:	bf44      	itt	mi
 8001fbe:	2320      	movmi	r3, #32
 8001fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fc4:	0711      	lsls	r1, r2, #28
 8001fc6:	bf44      	itt	mi
 8001fc8:	232b      	movmi	r3, #43	@ 0x2b
 8001fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fce:	f89a 3000 	ldrb.w	r3, [sl]
 8001fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fd4:	d015      	beq.n	8002002 <_svfiprintf_r+0xfa>
 8001fd6:	4654      	mov	r4, sl
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f04f 0c0a 	mov.w	ip, #10
 8001fde:	9a07      	ldr	r2, [sp, #28]
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fe6:	3b30      	subs	r3, #48	@ 0x30
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d94b      	bls.n	8002084 <_svfiprintf_r+0x17c>
 8001fec:	b1b0      	cbz	r0, 800201c <_svfiprintf_r+0x114>
 8001fee:	9207      	str	r2, [sp, #28]
 8001ff0:	e014      	b.n	800201c <_svfiprintf_r+0x114>
 8001ff2:	eba0 0308 	sub.w	r3, r0, r8
 8001ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	46a2      	mov	sl, r4
 8001ffe:	9304      	str	r3, [sp, #16]
 8002000:	e7d2      	b.n	8001fa8 <_svfiprintf_r+0xa0>
 8002002:	9b03      	ldr	r3, [sp, #12]
 8002004:	1d19      	adds	r1, r3, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	9103      	str	r1, [sp, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	bfbb      	ittet	lt
 800200e:	425b      	neglt	r3, r3
 8002010:	f042 0202 	orrlt.w	r2, r2, #2
 8002014:	9307      	strge	r3, [sp, #28]
 8002016:	9307      	strlt	r3, [sp, #28]
 8002018:	bfb8      	it	lt
 800201a:	9204      	strlt	r2, [sp, #16]
 800201c:	7823      	ldrb	r3, [r4, #0]
 800201e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002020:	d10a      	bne.n	8002038 <_svfiprintf_r+0x130>
 8002022:	7863      	ldrb	r3, [r4, #1]
 8002024:	2b2a      	cmp	r3, #42	@ 0x2a
 8002026:	d132      	bne.n	800208e <_svfiprintf_r+0x186>
 8002028:	9b03      	ldr	r3, [sp, #12]
 800202a:	3402      	adds	r4, #2
 800202c:	1d1a      	adds	r2, r3, #4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	9203      	str	r2, [sp, #12]
 8002032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002036:	9305      	str	r3, [sp, #20]
 8002038:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80020f0 <_svfiprintf_r+0x1e8>
 800203c:	2203      	movs	r2, #3
 800203e:	4650      	mov	r0, sl
 8002040:	7821      	ldrb	r1, [r4, #0]
 8002042:	f000 fa19 	bl	8002478 <memchr>
 8002046:	b138      	cbz	r0, 8002058 <_svfiprintf_r+0x150>
 8002048:	2240      	movs	r2, #64	@ 0x40
 800204a:	9b04      	ldr	r3, [sp, #16]
 800204c:	eba0 000a 	sub.w	r0, r0, sl
 8002050:	4082      	lsls	r2, r0
 8002052:	4313      	orrs	r3, r2
 8002054:	3401      	adds	r4, #1
 8002056:	9304      	str	r3, [sp, #16]
 8002058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800205c:	2206      	movs	r2, #6
 800205e:	4825      	ldr	r0, [pc, #148]	@ (80020f4 <_svfiprintf_r+0x1ec>)
 8002060:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002064:	f000 fa08 	bl	8002478 <memchr>
 8002068:	2800      	cmp	r0, #0
 800206a:	d036      	beq.n	80020da <_svfiprintf_r+0x1d2>
 800206c:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <_svfiprintf_r+0x1f0>)
 800206e:	bb1b      	cbnz	r3, 80020b8 <_svfiprintf_r+0x1b0>
 8002070:	9b03      	ldr	r3, [sp, #12]
 8002072:	3307      	adds	r3, #7
 8002074:	f023 0307 	bic.w	r3, r3, #7
 8002078:	3308      	adds	r3, #8
 800207a:	9303      	str	r3, [sp, #12]
 800207c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800207e:	4433      	add	r3, r6
 8002080:	9309      	str	r3, [sp, #36]	@ 0x24
 8002082:	e76a      	b.n	8001f5a <_svfiprintf_r+0x52>
 8002084:	460c      	mov	r4, r1
 8002086:	2001      	movs	r0, #1
 8002088:	fb0c 3202 	mla	r2, ip, r2, r3
 800208c:	e7a8      	b.n	8001fe0 <_svfiprintf_r+0xd8>
 800208e:	2300      	movs	r3, #0
 8002090:	f04f 0c0a 	mov.w	ip, #10
 8002094:	4619      	mov	r1, r3
 8002096:	3401      	adds	r4, #1
 8002098:	9305      	str	r3, [sp, #20]
 800209a:	4620      	mov	r0, r4
 800209c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020a0:	3a30      	subs	r2, #48	@ 0x30
 80020a2:	2a09      	cmp	r2, #9
 80020a4:	d903      	bls.n	80020ae <_svfiprintf_r+0x1a6>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0c6      	beq.n	8002038 <_svfiprintf_r+0x130>
 80020aa:	9105      	str	r1, [sp, #20]
 80020ac:	e7c4      	b.n	8002038 <_svfiprintf_r+0x130>
 80020ae:	4604      	mov	r4, r0
 80020b0:	2301      	movs	r3, #1
 80020b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80020b6:	e7f0      	b.n	800209a <_svfiprintf_r+0x192>
 80020b8:	ab03      	add	r3, sp, #12
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	462a      	mov	r2, r5
 80020be:	4638      	mov	r0, r7
 80020c0:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <_svfiprintf_r+0x1f4>)
 80020c2:	a904      	add	r1, sp, #16
 80020c4:	f3af 8000 	nop.w
 80020c8:	1c42      	adds	r2, r0, #1
 80020ca:	4606      	mov	r6, r0
 80020cc:	d1d6      	bne.n	800207c <_svfiprintf_r+0x174>
 80020ce:	89ab      	ldrh	r3, [r5, #12]
 80020d0:	065b      	lsls	r3, r3, #25
 80020d2:	f53f af2d 	bmi.w	8001f30 <_svfiprintf_r+0x28>
 80020d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020d8:	e72c      	b.n	8001f34 <_svfiprintf_r+0x2c>
 80020da:	ab03      	add	r3, sp, #12
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	462a      	mov	r2, r5
 80020e0:	4638      	mov	r0, r7
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <_svfiprintf_r+0x1f4>)
 80020e4:	a904      	add	r1, sp, #16
 80020e6:	f000 f87d 	bl	80021e4 <_printf_i>
 80020ea:	e7ed      	b.n	80020c8 <_svfiprintf_r+0x1c0>
 80020ec:	080026c2 	.word	0x080026c2
 80020f0:	080026c8 	.word	0x080026c8
 80020f4:	080026cc 	.word	0x080026cc
 80020f8:	00000000 	.word	0x00000000
 80020fc:	08001e51 	.word	0x08001e51

08002100 <_printf_common>:
 8002100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002104:	4616      	mov	r6, r2
 8002106:	4698      	mov	r8, r3
 8002108:	688a      	ldr	r2, [r1, #8]
 800210a:	690b      	ldr	r3, [r1, #16]
 800210c:	4607      	mov	r7, r0
 800210e:	4293      	cmp	r3, r2
 8002110:	bfb8      	it	lt
 8002112:	4613      	movlt	r3, r2
 8002114:	6033      	str	r3, [r6, #0]
 8002116:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800211a:	460c      	mov	r4, r1
 800211c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002120:	b10a      	cbz	r2, 8002126 <_printf_common+0x26>
 8002122:	3301      	adds	r3, #1
 8002124:	6033      	str	r3, [r6, #0]
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	0699      	lsls	r1, r3, #26
 800212a:	bf42      	ittt	mi
 800212c:	6833      	ldrmi	r3, [r6, #0]
 800212e:	3302      	addmi	r3, #2
 8002130:	6033      	strmi	r3, [r6, #0]
 8002132:	6825      	ldr	r5, [r4, #0]
 8002134:	f015 0506 	ands.w	r5, r5, #6
 8002138:	d106      	bne.n	8002148 <_printf_common+0x48>
 800213a:	f104 0a19 	add.w	sl, r4, #25
 800213e:	68e3      	ldr	r3, [r4, #12]
 8002140:	6832      	ldr	r2, [r6, #0]
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	42ab      	cmp	r3, r5
 8002146:	dc2b      	bgt.n	80021a0 <_printf_common+0xa0>
 8002148:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800214c:	6822      	ldr	r2, [r4, #0]
 800214e:	3b00      	subs	r3, #0
 8002150:	bf18      	it	ne
 8002152:	2301      	movne	r3, #1
 8002154:	0692      	lsls	r2, r2, #26
 8002156:	d430      	bmi.n	80021ba <_printf_common+0xba>
 8002158:	4641      	mov	r1, r8
 800215a:	4638      	mov	r0, r7
 800215c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002160:	47c8      	blx	r9
 8002162:	3001      	adds	r0, #1
 8002164:	d023      	beq.n	80021ae <_printf_common+0xae>
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	6922      	ldr	r2, [r4, #16]
 800216a:	f003 0306 	and.w	r3, r3, #6
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf14      	ite	ne
 8002172:	2500      	movne	r5, #0
 8002174:	6833      	ldreq	r3, [r6, #0]
 8002176:	f04f 0600 	mov.w	r6, #0
 800217a:	bf08      	it	eq
 800217c:	68e5      	ldreq	r5, [r4, #12]
 800217e:	f104 041a 	add.w	r4, r4, #26
 8002182:	bf08      	it	eq
 8002184:	1aed      	subeq	r5, r5, r3
 8002186:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800218a:	bf08      	it	eq
 800218c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002190:	4293      	cmp	r3, r2
 8002192:	bfc4      	itt	gt
 8002194:	1a9b      	subgt	r3, r3, r2
 8002196:	18ed      	addgt	r5, r5, r3
 8002198:	42b5      	cmp	r5, r6
 800219a:	d11a      	bne.n	80021d2 <_printf_common+0xd2>
 800219c:	2000      	movs	r0, #0
 800219e:	e008      	b.n	80021b2 <_printf_common+0xb2>
 80021a0:	2301      	movs	r3, #1
 80021a2:	4652      	mov	r2, sl
 80021a4:	4641      	mov	r1, r8
 80021a6:	4638      	mov	r0, r7
 80021a8:	47c8      	blx	r9
 80021aa:	3001      	adds	r0, #1
 80021ac:	d103      	bne.n	80021b6 <_printf_common+0xb6>
 80021ae:	f04f 30ff 	mov.w	r0, #4294967295
 80021b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b6:	3501      	adds	r5, #1
 80021b8:	e7c1      	b.n	800213e <_printf_common+0x3e>
 80021ba:	2030      	movs	r0, #48	@ 0x30
 80021bc:	18e1      	adds	r1, r4, r3
 80021be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80021c8:	4422      	add	r2, r4
 80021ca:	3302      	adds	r3, #2
 80021cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80021d0:	e7c2      	b.n	8002158 <_printf_common+0x58>
 80021d2:	2301      	movs	r3, #1
 80021d4:	4622      	mov	r2, r4
 80021d6:	4641      	mov	r1, r8
 80021d8:	4638      	mov	r0, r7
 80021da:	47c8      	blx	r9
 80021dc:	3001      	adds	r0, #1
 80021de:	d0e6      	beq.n	80021ae <_printf_common+0xae>
 80021e0:	3601      	adds	r6, #1
 80021e2:	e7d9      	b.n	8002198 <_printf_common+0x98>

080021e4 <_printf_i>:
 80021e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021e8:	7e0f      	ldrb	r7, [r1, #24]
 80021ea:	4691      	mov	r9, r2
 80021ec:	2f78      	cmp	r7, #120	@ 0x78
 80021ee:	4680      	mov	r8, r0
 80021f0:	460c      	mov	r4, r1
 80021f2:	469a      	mov	sl, r3
 80021f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021fa:	d807      	bhi.n	800220c <_printf_i+0x28>
 80021fc:	2f62      	cmp	r7, #98	@ 0x62
 80021fe:	d80a      	bhi.n	8002216 <_printf_i+0x32>
 8002200:	2f00      	cmp	r7, #0
 8002202:	f000 80d3 	beq.w	80023ac <_printf_i+0x1c8>
 8002206:	2f58      	cmp	r7, #88	@ 0x58
 8002208:	f000 80ba 	beq.w	8002380 <_printf_i+0x19c>
 800220c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002214:	e03a      	b.n	800228c <_printf_i+0xa8>
 8002216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800221a:	2b15      	cmp	r3, #21
 800221c:	d8f6      	bhi.n	800220c <_printf_i+0x28>
 800221e:	a101      	add	r1, pc, #4	@ (adr r1, 8002224 <_printf_i+0x40>)
 8002220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002224:	0800227d 	.word	0x0800227d
 8002228:	08002291 	.word	0x08002291
 800222c:	0800220d 	.word	0x0800220d
 8002230:	0800220d 	.word	0x0800220d
 8002234:	0800220d 	.word	0x0800220d
 8002238:	0800220d 	.word	0x0800220d
 800223c:	08002291 	.word	0x08002291
 8002240:	0800220d 	.word	0x0800220d
 8002244:	0800220d 	.word	0x0800220d
 8002248:	0800220d 	.word	0x0800220d
 800224c:	0800220d 	.word	0x0800220d
 8002250:	08002393 	.word	0x08002393
 8002254:	080022bb 	.word	0x080022bb
 8002258:	0800234d 	.word	0x0800234d
 800225c:	0800220d 	.word	0x0800220d
 8002260:	0800220d 	.word	0x0800220d
 8002264:	080023b5 	.word	0x080023b5
 8002268:	0800220d 	.word	0x0800220d
 800226c:	080022bb 	.word	0x080022bb
 8002270:	0800220d 	.word	0x0800220d
 8002274:	0800220d 	.word	0x0800220d
 8002278:	08002355 	.word	0x08002355
 800227c:	6833      	ldr	r3, [r6, #0]
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6032      	str	r2, [r6, #0]
 8002284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800228c:	2301      	movs	r3, #1
 800228e:	e09e      	b.n	80023ce <_printf_i+0x1ea>
 8002290:	6833      	ldr	r3, [r6, #0]
 8002292:	6820      	ldr	r0, [r4, #0]
 8002294:	1d19      	adds	r1, r3, #4
 8002296:	6031      	str	r1, [r6, #0]
 8002298:	0606      	lsls	r6, r0, #24
 800229a:	d501      	bpl.n	80022a0 <_printf_i+0xbc>
 800229c:	681d      	ldr	r5, [r3, #0]
 800229e:	e003      	b.n	80022a8 <_printf_i+0xc4>
 80022a0:	0645      	lsls	r5, r0, #25
 80022a2:	d5fb      	bpl.n	800229c <_printf_i+0xb8>
 80022a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	da03      	bge.n	80022b4 <_printf_i+0xd0>
 80022ac:	232d      	movs	r3, #45	@ 0x2d
 80022ae:	426d      	negs	r5, r5
 80022b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022b4:	230a      	movs	r3, #10
 80022b6:	4859      	ldr	r0, [pc, #356]	@ (800241c <_printf_i+0x238>)
 80022b8:	e011      	b.n	80022de <_printf_i+0xfa>
 80022ba:	6821      	ldr	r1, [r4, #0]
 80022bc:	6833      	ldr	r3, [r6, #0]
 80022be:	0608      	lsls	r0, r1, #24
 80022c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80022c4:	d402      	bmi.n	80022cc <_printf_i+0xe8>
 80022c6:	0649      	lsls	r1, r1, #25
 80022c8:	bf48      	it	mi
 80022ca:	b2ad      	uxthmi	r5, r5
 80022cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80022ce:	6033      	str	r3, [r6, #0]
 80022d0:	bf14      	ite	ne
 80022d2:	230a      	movne	r3, #10
 80022d4:	2308      	moveq	r3, #8
 80022d6:	4851      	ldr	r0, [pc, #324]	@ (800241c <_printf_i+0x238>)
 80022d8:	2100      	movs	r1, #0
 80022da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022de:	6866      	ldr	r6, [r4, #4]
 80022e0:	2e00      	cmp	r6, #0
 80022e2:	bfa8      	it	ge
 80022e4:	6821      	ldrge	r1, [r4, #0]
 80022e6:	60a6      	str	r6, [r4, #8]
 80022e8:	bfa4      	itt	ge
 80022ea:	f021 0104 	bicge.w	r1, r1, #4
 80022ee:	6021      	strge	r1, [r4, #0]
 80022f0:	b90d      	cbnz	r5, 80022f6 <_printf_i+0x112>
 80022f2:	2e00      	cmp	r6, #0
 80022f4:	d04b      	beq.n	800238e <_printf_i+0x1aa>
 80022f6:	4616      	mov	r6, r2
 80022f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80022fc:	fb03 5711 	mls	r7, r3, r1, r5
 8002300:	5dc7      	ldrb	r7, [r0, r7]
 8002302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002306:	462f      	mov	r7, r5
 8002308:	42bb      	cmp	r3, r7
 800230a:	460d      	mov	r5, r1
 800230c:	d9f4      	bls.n	80022f8 <_printf_i+0x114>
 800230e:	2b08      	cmp	r3, #8
 8002310:	d10b      	bne.n	800232a <_printf_i+0x146>
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	07df      	lsls	r7, r3, #31
 8002316:	d508      	bpl.n	800232a <_printf_i+0x146>
 8002318:	6923      	ldr	r3, [r4, #16]
 800231a:	6861      	ldr	r1, [r4, #4]
 800231c:	4299      	cmp	r1, r3
 800231e:	bfde      	ittt	le
 8002320:	2330      	movle	r3, #48	@ 0x30
 8002322:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002326:	f106 36ff 	addle.w	r6, r6, #4294967295
 800232a:	1b92      	subs	r2, r2, r6
 800232c:	6122      	str	r2, [r4, #16]
 800232e:	464b      	mov	r3, r9
 8002330:	4621      	mov	r1, r4
 8002332:	4640      	mov	r0, r8
 8002334:	f8cd a000 	str.w	sl, [sp]
 8002338:	aa03      	add	r2, sp, #12
 800233a:	f7ff fee1 	bl	8002100 <_printf_common>
 800233e:	3001      	adds	r0, #1
 8002340:	d14a      	bne.n	80023d8 <_printf_i+0x1f4>
 8002342:	f04f 30ff 	mov.w	r0, #4294967295
 8002346:	b004      	add	sp, #16
 8002348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	f043 0320 	orr.w	r3, r3, #32
 8002352:	6023      	str	r3, [r4, #0]
 8002354:	2778      	movs	r7, #120	@ 0x78
 8002356:	4832      	ldr	r0, [pc, #200]	@ (8002420 <_printf_i+0x23c>)
 8002358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	6831      	ldr	r1, [r6, #0]
 8002360:	061f      	lsls	r7, r3, #24
 8002362:	f851 5b04 	ldr.w	r5, [r1], #4
 8002366:	d402      	bmi.n	800236e <_printf_i+0x18a>
 8002368:	065f      	lsls	r7, r3, #25
 800236a:	bf48      	it	mi
 800236c:	b2ad      	uxthmi	r5, r5
 800236e:	6031      	str	r1, [r6, #0]
 8002370:	07d9      	lsls	r1, r3, #31
 8002372:	bf44      	itt	mi
 8002374:	f043 0320 	orrmi.w	r3, r3, #32
 8002378:	6023      	strmi	r3, [r4, #0]
 800237a:	b11d      	cbz	r5, 8002384 <_printf_i+0x1a0>
 800237c:	2310      	movs	r3, #16
 800237e:	e7ab      	b.n	80022d8 <_printf_i+0xf4>
 8002380:	4826      	ldr	r0, [pc, #152]	@ (800241c <_printf_i+0x238>)
 8002382:	e7e9      	b.n	8002358 <_printf_i+0x174>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	f023 0320 	bic.w	r3, r3, #32
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	e7f6      	b.n	800237c <_printf_i+0x198>
 800238e:	4616      	mov	r6, r2
 8002390:	e7bd      	b.n	800230e <_printf_i+0x12a>
 8002392:	6833      	ldr	r3, [r6, #0]
 8002394:	6825      	ldr	r5, [r4, #0]
 8002396:	1d18      	adds	r0, r3, #4
 8002398:	6961      	ldr	r1, [r4, #20]
 800239a:	6030      	str	r0, [r6, #0]
 800239c:	062e      	lsls	r6, r5, #24
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	d501      	bpl.n	80023a6 <_printf_i+0x1c2>
 80023a2:	6019      	str	r1, [r3, #0]
 80023a4:	e002      	b.n	80023ac <_printf_i+0x1c8>
 80023a6:	0668      	lsls	r0, r5, #25
 80023a8:	d5fb      	bpl.n	80023a2 <_printf_i+0x1be>
 80023aa:	8019      	strh	r1, [r3, #0]
 80023ac:	2300      	movs	r3, #0
 80023ae:	4616      	mov	r6, r2
 80023b0:	6123      	str	r3, [r4, #16]
 80023b2:	e7bc      	b.n	800232e <_printf_i+0x14a>
 80023b4:	6833      	ldr	r3, [r6, #0]
 80023b6:	2100      	movs	r1, #0
 80023b8:	1d1a      	adds	r2, r3, #4
 80023ba:	6032      	str	r2, [r6, #0]
 80023bc:	681e      	ldr	r6, [r3, #0]
 80023be:	6862      	ldr	r2, [r4, #4]
 80023c0:	4630      	mov	r0, r6
 80023c2:	f000 f859 	bl	8002478 <memchr>
 80023c6:	b108      	cbz	r0, 80023cc <_printf_i+0x1e8>
 80023c8:	1b80      	subs	r0, r0, r6
 80023ca:	6060      	str	r0, [r4, #4]
 80023cc:	6863      	ldr	r3, [r4, #4]
 80023ce:	6123      	str	r3, [r4, #16]
 80023d0:	2300      	movs	r3, #0
 80023d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023d6:	e7aa      	b.n	800232e <_printf_i+0x14a>
 80023d8:	4632      	mov	r2, r6
 80023da:	4649      	mov	r1, r9
 80023dc:	4640      	mov	r0, r8
 80023de:	6923      	ldr	r3, [r4, #16]
 80023e0:	47d0      	blx	sl
 80023e2:	3001      	adds	r0, #1
 80023e4:	d0ad      	beq.n	8002342 <_printf_i+0x15e>
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	079b      	lsls	r3, r3, #30
 80023ea:	d413      	bmi.n	8002414 <_printf_i+0x230>
 80023ec:	68e0      	ldr	r0, [r4, #12]
 80023ee:	9b03      	ldr	r3, [sp, #12]
 80023f0:	4298      	cmp	r0, r3
 80023f2:	bfb8      	it	lt
 80023f4:	4618      	movlt	r0, r3
 80023f6:	e7a6      	b.n	8002346 <_printf_i+0x162>
 80023f8:	2301      	movs	r3, #1
 80023fa:	4632      	mov	r2, r6
 80023fc:	4649      	mov	r1, r9
 80023fe:	4640      	mov	r0, r8
 8002400:	47d0      	blx	sl
 8002402:	3001      	adds	r0, #1
 8002404:	d09d      	beq.n	8002342 <_printf_i+0x15e>
 8002406:	3501      	adds	r5, #1
 8002408:	68e3      	ldr	r3, [r4, #12]
 800240a:	9903      	ldr	r1, [sp, #12]
 800240c:	1a5b      	subs	r3, r3, r1
 800240e:	42ab      	cmp	r3, r5
 8002410:	dcf2      	bgt.n	80023f8 <_printf_i+0x214>
 8002412:	e7eb      	b.n	80023ec <_printf_i+0x208>
 8002414:	2500      	movs	r5, #0
 8002416:	f104 0619 	add.w	r6, r4, #25
 800241a:	e7f5      	b.n	8002408 <_printf_i+0x224>
 800241c:	080026d3 	.word	0x080026d3
 8002420:	080026e4 	.word	0x080026e4

08002424 <memmove>:
 8002424:	4288      	cmp	r0, r1
 8002426:	b510      	push	{r4, lr}
 8002428:	eb01 0402 	add.w	r4, r1, r2
 800242c:	d902      	bls.n	8002434 <memmove+0x10>
 800242e:	4284      	cmp	r4, r0
 8002430:	4623      	mov	r3, r4
 8002432:	d807      	bhi.n	8002444 <memmove+0x20>
 8002434:	1e43      	subs	r3, r0, #1
 8002436:	42a1      	cmp	r1, r4
 8002438:	d008      	beq.n	800244c <memmove+0x28>
 800243a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800243e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002442:	e7f8      	b.n	8002436 <memmove+0x12>
 8002444:	4601      	mov	r1, r0
 8002446:	4402      	add	r2, r0
 8002448:	428a      	cmp	r2, r1
 800244a:	d100      	bne.n	800244e <memmove+0x2a>
 800244c:	bd10      	pop	{r4, pc}
 800244e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002456:	e7f7      	b.n	8002448 <memmove+0x24>

08002458 <_sbrk_r>:
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	2300      	movs	r3, #0
 800245c:	4d05      	ldr	r5, [pc, #20]	@ (8002474 <_sbrk_r+0x1c>)
 800245e:	4604      	mov	r4, r0
 8002460:	4608      	mov	r0, r1
 8002462:	602b      	str	r3, [r5, #0]
 8002464:	f7fe fc38 	bl	8000cd8 <_sbrk>
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	d102      	bne.n	8002472 <_sbrk_r+0x1a>
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	b103      	cbz	r3, 8002472 <_sbrk_r+0x1a>
 8002470:	6023      	str	r3, [r4, #0]
 8002472:	bd38      	pop	{r3, r4, r5, pc}
 8002474:	200001d0 	.word	0x200001d0

08002478 <memchr>:
 8002478:	4603      	mov	r3, r0
 800247a:	b510      	push	{r4, lr}
 800247c:	b2c9      	uxtb	r1, r1
 800247e:	4402      	add	r2, r0
 8002480:	4293      	cmp	r3, r2
 8002482:	4618      	mov	r0, r3
 8002484:	d101      	bne.n	800248a <memchr+0x12>
 8002486:	2000      	movs	r0, #0
 8002488:	e003      	b.n	8002492 <memchr+0x1a>
 800248a:	7804      	ldrb	r4, [r0, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	428c      	cmp	r4, r1
 8002490:	d1f6      	bne.n	8002480 <memchr+0x8>
 8002492:	bd10      	pop	{r4, pc}

08002494 <memcpy>:
 8002494:	440a      	add	r2, r1
 8002496:	4291      	cmp	r1, r2
 8002498:	f100 33ff 	add.w	r3, r0, #4294967295
 800249c:	d100      	bne.n	80024a0 <memcpy+0xc>
 800249e:	4770      	bx	lr
 80024a0:	b510      	push	{r4, lr}
 80024a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024a6:	4291      	cmp	r1, r2
 80024a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024ac:	d1f9      	bne.n	80024a2 <memcpy+0xe>
 80024ae:	bd10      	pop	{r4, pc}

080024b0 <_realloc_r>:
 80024b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b4:	4680      	mov	r8, r0
 80024b6:	4615      	mov	r5, r2
 80024b8:	460c      	mov	r4, r1
 80024ba:	b921      	cbnz	r1, 80024c6 <_realloc_r+0x16>
 80024bc:	4611      	mov	r1, r2
 80024be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024c2:	f7ff bc39 	b.w	8001d38 <_malloc_r>
 80024c6:	b92a      	cbnz	r2, 80024d4 <_realloc_r+0x24>
 80024c8:	f7ff fbcc 	bl	8001c64 <_free_r>
 80024cc:	2400      	movs	r4, #0
 80024ce:	4620      	mov	r0, r4
 80024d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024d4:	f000 f81a 	bl	800250c <_malloc_usable_size_r>
 80024d8:	4285      	cmp	r5, r0
 80024da:	4606      	mov	r6, r0
 80024dc:	d802      	bhi.n	80024e4 <_realloc_r+0x34>
 80024de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80024e2:	d8f4      	bhi.n	80024ce <_realloc_r+0x1e>
 80024e4:	4629      	mov	r1, r5
 80024e6:	4640      	mov	r0, r8
 80024e8:	f7ff fc26 	bl	8001d38 <_malloc_r>
 80024ec:	4607      	mov	r7, r0
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d0ec      	beq.n	80024cc <_realloc_r+0x1c>
 80024f2:	42b5      	cmp	r5, r6
 80024f4:	462a      	mov	r2, r5
 80024f6:	4621      	mov	r1, r4
 80024f8:	bf28      	it	cs
 80024fa:	4632      	movcs	r2, r6
 80024fc:	f7ff ffca 	bl	8002494 <memcpy>
 8002500:	4621      	mov	r1, r4
 8002502:	4640      	mov	r0, r8
 8002504:	f7ff fbae 	bl	8001c64 <_free_r>
 8002508:	463c      	mov	r4, r7
 800250a:	e7e0      	b.n	80024ce <_realloc_r+0x1e>

0800250c <_malloc_usable_size_r>:
 800250c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002510:	1f18      	subs	r0, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	bfbc      	itt	lt
 8002516:	580b      	ldrlt	r3, [r1, r0]
 8002518:	18c0      	addlt	r0, r0, r3
 800251a:	4770      	bx	lr

0800251c <_init>:
 800251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251e:	bf00      	nop
 8002520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002522:	bc08      	pop	{r3}
 8002524:	469e      	mov	lr, r3
 8002526:	4770      	bx	lr

08002528 <_fini>:
 8002528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252a:	bf00      	nop
 800252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252e:	bc08      	pop	{r3}
 8002530:	469e      	mov	lr, r3
 8002532:	4770      	bx	lr
