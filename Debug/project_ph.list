
project_ph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000231c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08002428  08002428  00003428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025dc  080025dc  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  080025dc  080025dc  000035dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025e4  080025e4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e4  080025e4  000035e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025e8  080025e8  000035e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080025ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000068  08002654  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08002654  000041e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000342f  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011ea  00000000  00000000  000074c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  000086b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000397  00000000  00000000  00008bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001693a  00000000  00000000  00008f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005df5  00000000  00000000  0001f881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f8e8  00000000  00000000  00025676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a4f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000170c  00000000  00000000  000a4fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a66b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002410 	.word	0x08002410

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002410 	.word	0x08002410

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <begin>:
/* @param4    : Tamanho da matriz de caractere do display (LCD_5x10DOTS ou LCD_5x8DOTS) 														  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void begin(LiquidCrystal *lcd, uint8_t cols, uint8_t lines, uint8_t dotsize) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	4608      	mov	r0, r1
 8000166:	4611      	mov	r1, r2
 8000168:	461a      	mov	r2, r3
 800016a:	4603      	mov	r3, r0
 800016c:	70fb      	strb	r3, [r7, #3]
 800016e:	460b      	mov	r3, r1
 8000170:	70bb      	strb	r3, [r7, #2]
 8000172:	4613      	mov	r3, r2
 8000174:	707b      	strb	r3, [r7, #1]

	LiquidCrystal zero = {0};
 8000176:	f107 0308 	add.w	r3, r7, #8
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
	*lcd = zero;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	461a      	mov	r2, r3
 8000184:	f107 0308 	add.w	r3, r7, #8
 8000188:	cb03      	ldmia	r3!, {r0, r1}
 800018a:	6010      	str	r0, [r2, #0]
 800018c:	6051      	str	r1, [r2, #4]

	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800018e:	2200      	movs	r2, #0
 8000190:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000194:	4847      	ldr	r0, [pc, #284]	@ (80002b4 <begin+0x158>)
 8000196:	f001 f880 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 800019a:	2200      	movs	r2, #0
 800019c:	2108      	movs	r1, #8
 800019e:	4846      	ldr	r0, [pc, #280]	@ (80002b8 <begin+0x15c>)
 80001a0:	f001 f87b 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	2110      	movs	r1, #16
 80001a8:	4843      	ldr	r0, [pc, #268]	@ (80002b8 <begin+0x15c>)
 80001aa:	f001 f876 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001b4:	4840      	ldr	r0, [pc, #256]	@ (80002b8 <begin+0x15c>)
 80001b6:	f001 f870 	bl	800129a <HAL_GPIO_WritePin>

  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c0:	483d      	ldr	r0, [pc, #244]	@ (80002b8 <begin+0x15c>)
 80001c2:	f001 f86a 	bl	800129a <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001cc:	483a      	ldr	r0, [pc, #232]	@ (80002b8 <begin+0x15c>)
 80001ce:	f001 f864 	bl	800129a <HAL_GPIO_WritePin>

	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port,LCD_RW_Pin,GPIO_PIN_RESET);
	#endif

	if (lines > 1) {
 80001d2:	78bb      	ldrb	r3, [r7, #2]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d906      	bls.n	80001e6 <begin+0x8a>
		lcd->_displayfunction |= LCD_2LINE;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	f043 0308 	orr.w	r3, r3, #8
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	701a      	strb	r2, [r3, #0]
	}
	lcd->_numlines = lines;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	78ba      	ldrb	r2, [r7, #2]
 80001ea:	70da      	strb	r2, [r3, #3]

	setRowOffsets(lcd,0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80001ec:	78fa      	ldrb	r2, [r7, #3]
 80001ee:	78fb      	ldrb	r3, [r7, #3]
 80001f0:	3340      	adds	r3, #64	@ 0x40
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	4613      	mov	r3, r2
 80001f6:	2240      	movs	r2, #64	@ 0x40
 80001f8:	2100      	movs	r1, #0
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f000 f93a 	bl	8000474 <setRowOffsets>

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000200:	787b      	ldrb	r3, [r7, #1]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d009      	beq.n	800021a <begin+0xbe>
 8000206:	78bb      	ldrb	r3, [r7, #2]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d106      	bne.n	800021a <begin+0xbe>
		lcd->_displayfunction |= LCD_5x10DOTS;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	b2da      	uxtb	r2, r3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	701a      	strb	r2, [r3, #0]
  	}

    // Veja Pg 45/46 para especificações de inicialização!
    // De acordo com o datasheet, precisamos de pelo menos 40ms após a alimentação atingir 2.7V
    // Vamos aguardar 50ms para ter uma pequena margem
    HAL_Delay(50);
 800021a:	2032      	movs	r0, #50	@ 0x32
 800021c:	f000 fd9a 	bl	8000d54 <HAL_Delay>

  	// Colocamos RS e RW em low para começar os comandos
  	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000226:	4824      	ldr	r0, [pc, #144]	@ (80002b8 <begin+0x15c>)
 8000228:	f001 f837 	bl	800129a <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000232:	4821      	ldr	r0, [pc, #132]	@ (80002b8 <begin+0x15c>)
 8000234:	f001 f831 	bl	800129a <HAL_GPIO_WritePin>
	#if defined(LCD_RW_GPIO_Port) && defined(LCD_RW_Pin)
  	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
	#endif

  	// Coloca o LCD em 4bit ou 8bit mode
  	if ((lcd->_displayfunction | LCD_4BITMODE)) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d014      	beq.n	800026a <begin+0x10e>
		// Sequência a seguir conforme Hitachi HD44780 datasheet
		// Figura 24, pg 46

		// Começa com modo 8bit, então tenta configurar para  modo 4bit.
		write4bits(0x03);
 8000240:	2003      	movs	r0, #3
 8000242:	f000 f8cb 	bl	80003dc <write4bits>
		HAL_Delay(5); 		// wait min 4.1ms
 8000246:	2005      	movs	r0, #5
 8000248:	f000 fd84 	bl	8000d54 <HAL_Delay>

		// Segundo envio
		write4bits(0x03);
 800024c:	2003      	movs	r0, #3
 800024e:	f000 f8c5 	bl	80003dc <write4bits>
		HAL_Delay(5); // wait min 4.1ms
 8000252:	2005      	movs	r0, #5
 8000254:	f000 fd7e 	bl	8000d54 <HAL_Delay>

		// Terceiro envio
		write4bits(0x03);
 8000258:	2003      	movs	r0, #3
 800025a:	f000 f8bf 	bl	80003dc <write4bits>
		HAL_Delay(5);
 800025e:	2005      	movs	r0, #5
 8000260:	f000 fd78 	bl	8000d54 <HAL_Delay>

		// Configura para interface 4bit
		write4bits(0x02);
 8000264:	2002      	movs	r0, #2
 8000266:	f000 f8b9 	bl	80003dc <write4bits>
		HAL_Delay(1);
    }
	#endif

    // Configura quantidade de linhas, tamanho da fonte, etc
    command(lcd,LCD_FUNCTIONSET | lcd->_displayfunction);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	b2db      	uxtb	r3, r3
 8000274:	4619      	mov	r1, r3
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f000 f8ec 	bl	8000454 <command>
    HAL_Delay(1);
 800027c:	2001      	movs	r0, #1
 800027e:	f000 fd69 	bl	8000d54 <HAL_Delay>

    // Liga display com cursor piscante por padrão
    lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2204      	movs	r2, #4
 8000286:	705a      	strb	r2, [r3, #1]
    display(lcd);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 f848 	bl	800031e <display>

    // Limpa display
    clear(lcd);
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f000 f836 	bl	8000300 <clear>

    // Configura direção do texto padrão
    lcd->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2202      	movs	r2, #2
 8000298:	709a      	strb	r2, [r3, #2]

    // Configura entry mode
    command(lcd,LCD_ENTRYMODESET | lcd->_displaymode);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	4619      	mov	r1, r3
 80002a6:	6878      	ldr	r0, [r7, #4]
 80002a8:	f000 f8d4 	bl	8000454 <command>
}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40010800 	.word	0x40010800
 80002b8:	40010c00 	.word	0x40010c00

080002bc <print>:
/* @param2    : Ponteiro para string contendo o texto                                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void print(LiquidCrystal *lcd, int8_t *value){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]

	size_t Lengh = strlen(value);
 80002c6:	6838      	ldr	r0, [r7, #0]
 80002c8:	f7ff ff40 	bl	800014c <strlen>
 80002cc:	60b8      	str	r0, [r7, #8]

	for (uint8_t i = 0; i < Lengh; i++){
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
 80002d2:	e00c      	b.n	80002ee <print+0x32>
		write(lcd ,*(value+i));
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	4413      	add	r3, r2
 80002da:	f993 3000 	ldrsb.w	r3, [r3]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	4619      	mov	r1, r3
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f000 f833 	bl	800034e <write>
	for (uint8_t i = 0; i < Lengh; i++){
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	3301      	adds	r3, #1
 80002ec:	73fb      	strb	r3, [r7, #15]
 80002ee:	7bfb      	ldrb	r3, [r7, #15]
 80002f0:	68ba      	ldr	r2, [r7, #8]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d8ee      	bhi.n	80002d4 <print+0x18>
	}
}
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <clear>:
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void clear(LiquidCrystal *lcd)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    command(lcd,LCD_CLEARDISPLAY);  // limpa display e seta cursor para posição 0,0
 8000308:	2101      	movs	r1, #1
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f8a2 	bl	8000454 <command>
    HAL_Delay(2);  				    // aguarda execução por parte do display
 8000310:	2002      	movs	r0, #2
 8000312:	f000 fd1f 	bl	8000d54 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <display>:
/* @param1    : Ponteiro para display que será manipulado pela função                                                                             */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void display(LiquidCrystal *lcd) {
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
    lcd->_displaycontrol |= LCD_DISPLAYON;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	785b      	ldrb	r3, [r3, #1]
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	b2da      	uxtb	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	705a      	strb	r2, [r3, #1]
    command(lcd,LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	785b      	ldrb	r3, [r3, #1]
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	b2db      	uxtb	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 f887 	bl	8000454 <command>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <write>:
/* @param2    : Valor do caractere que deverá ser escrito			                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write(LiquidCrystal *lcd, uint8_t value) {
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	460b      	mov	r3, r1
 8000358:	70fb      	strb	r3, [r7, #3]
	send(lcd,value, 1);
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	2201      	movs	r2, #1
 800035e:	4619      	mov	r1, r3
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f000 f805 	bl	8000370 <send>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <send>:
/* @param3    : Tipo de informação que está sendo escrito (dado ou comando)                                                      			      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void send(LiquidCrystal *lcd, uint8_t value, uint8_t mode) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
 800037c:	4613      	mov	r3, r2
 800037e:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,mode);
 8000380:	78bb      	ldrb	r3, [r7, #2]
 8000382:	461a      	mov	r2, r3
 8000384:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000388:	4808      	ldr	r0, [pc, #32]	@ (80003ac <send+0x3c>)
 800038a:	f000 ff86 	bl	800129a <HAL_GPIO_WritePin>
	#if defined(LCD_8BITMODE)
	  if (lcd->_displayfunction & LCD_8BITMODE) {
	    write8bits(value);
	  } else {
	#endif
	    write4bits(value>>4);
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	091b      	lsrs	r3, r3, #4
 8000392:	b2db      	uxtb	r3, r3
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f821 	bl	80003dc <write4bits>
	    write4bits(value);
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f81d 	bl	80003dc <write4bits>
	#if defined(LCD_8BITMODE)
	  }
	#endif

}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010c00 	.word	0x40010c00

080003b0 <pulseEnable>:
/* @param1    : void												                                                                              */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void pulseEnable(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003ba:	4807      	ldr	r0, [pc, #28]	@ (80003d8 <pulseEnable+0x28>)
 80003bc:	f000 ff6d 	bl	800129a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 fcc7 	bl	8000d54 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003cc:	4802      	ldr	r0, [pc, #8]	@ (80003d8 <pulseEnable+0x28>)
 80003ce:	f000 ff64 	bl	800129a <HAL_GPIO_WritePin>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010c00 	.word	0x40010c00

080003dc <write4bits>:
/* @param1    : Dado a ser enviado												                                                                  */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void write4bits(uint8_t value) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,(value >> 0) & 0x01);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003f4:	4815      	ldr	r0, [pc, #84]	@ (800044c <write4bits+0x70>)
 80003f6:	f000 ff50 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,(value >> 1) & 0x01);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	085b      	lsrs	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	f003 0301 	and.w	r3, r3, #1
 8000404:	b2db      	uxtb	r3, r3
 8000406:	461a      	mov	r2, r3
 8000408:	2108      	movs	r1, #8
 800040a:	4811      	ldr	r0, [pc, #68]	@ (8000450 <write4bits+0x74>)
 800040c:	f000 ff45 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,(value >> 2) & 0x01);
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	089b      	lsrs	r3, r3, #2
 8000414:	b2db      	uxtb	r3, r3
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	2110      	movs	r1, #16
 8000420:	480b      	ldr	r0, [pc, #44]	@ (8000450 <write4bits+0x74>)
 8000422:	f000 ff3a 	bl	800129a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,(value >> 3) & 0x01);
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	b2db      	uxtb	r3, r3
 8000432:	461a      	mov	r2, r3
 8000434:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000438:	4805      	ldr	r0, [pc, #20]	@ (8000450 <write4bits+0x74>)
 800043a:	f000 ff2e 	bl	800129a <HAL_GPIO_WritePin>

	pulseEnable();
 800043e:	f7ff ffb7 	bl	80003b0 <pulseEnable>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00

08000454 <command>:
/* @param2    : Valor do comando a ser enviado												                                                      */
/*                                                                                                												  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void command(LiquidCrystal *lcd, uint8_t value) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
  send(lcd, value, 0);
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	2200      	movs	r2, #0
 8000464:	4619      	mov	r1, r3
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff ff82 	bl	8000370 <send>
}
 800046c:	bf00      	nop
 800046e:	3708      	adds	r7, #8
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <setRowOffsets>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setRowOffsets(LiquidCrystal *lcd, int row0, int row1, int row2, int row3)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	603b      	str	r3, [r7, #0]
	lcd->_row_offsets[0] = row0;
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	b2da      	uxtb	r2, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	711a      	strb	r2, [r3, #4]
	lcd->_row_offsets[1] = row1;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	b2da      	uxtb	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	715a      	strb	r2, [r3, #5]
	lcd->_row_offsets[2] = row2;
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	b2da      	uxtb	r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	719a      	strb	r2, [r3, #6]
	lcd->_row_offsets[3] = row3;
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	b2da      	uxtb	r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	71da      	strb	r2, [r3, #7]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <setCursor>:
/*                               												                                                                  */
/* @ret val   : void 																															  */
/*                                                                                                                                                */
/**************************************************************************************************************************************************/
void setCursor(LiquidCrystal *lcd, uint8_t col, uint8_t row)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	460b      	mov	r3, r1
 80004b6:	70fb      	strb	r3, [r7, #3]
 80004b8:	4613      	mov	r3, r2
 80004ba:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(lcd->_row_offsets) / sizeof(*(lcd->_row_offsets));
 80004bc:	2304      	movs	r3, #4
 80004be:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) {
 80004c0:	78bb      	ldrb	r3, [r7, #2]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d803      	bhi.n	80004d0 <setCursor+0x24>
		row = max_lines - 1;    	 // Contamos linhas iniciando do 0
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	3b01      	subs	r3, #1
 80004ce:	70bb      	strb	r3, [r7, #2]
	}
	if ( row >= lcd->_numlines ) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	78db      	ldrb	r3, [r3, #3]
 80004d4:	78ba      	ldrb	r2, [r7, #2]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d303      	bcc.n	80004e2 <setCursor+0x36>
		row = lcd->_numlines - 1;    // contamos linhas iniciando em 0
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	78db      	ldrb	r3, [r3, #3]
 80004de:	3b01      	subs	r3, #1
 80004e0:	70bb      	strb	r3, [r7, #2]
	}
	command(lcd,LCD_SETDDRAMADDR | (col + lcd->_row_offsets[row]));
 80004e2:	78bb      	ldrb	r3, [r7, #2]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	4413      	add	r3, r2
 80004e8:	791a      	ldrb	r2, [r3, #4]
 80004ea:	78fb      	ldrb	r3, [r7, #3]
 80004ec:	4413      	add	r3, r2
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004f6:	b25b      	sxtb	r3, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ffa9 	bl	8000454 <command>
}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <main>:
// Função de inicialização
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    HAL_Init();
 8000510:	f000 fbbe 	bl	8000c90 <HAL_Init>
    SystemClock_Config();
 8000514:	f000 fa1e 	bl	8000954 <SystemClock_Config>
    MX_GPIO_Init();
 8000518:	f000 fa62 	bl	80009e0 <MX_GPIO_Init>

    // Inicializa o LCD
    begin(&lcd, 16, 2, LCD_5x8DOTS);
 800051c:	2300      	movs	r3, #0
 800051e:	2202      	movs	r2, #2
 8000520:	2110      	movs	r1, #16
 8000522:	4825      	ldr	r0, [pc, #148]	@ (80005b8 <main+0xac>)
 8000524:	f7ff fe1a 	bl	800015c <begin>

    apresentacao();
 8000528:	f000 f854 	bl	80005d4 <apresentacao>

    // Loop principal
    while (1)
    {
        // Leituras dos Botões
        button_confirm = HAL_GPIO_ReadPin(BT_ESQ_GPIO_Port, BT_ESQ_Pin);   // Botão de confirmação (esquerda)
 800052c:	2140      	movs	r1, #64	@ 0x40
 800052e:	4823      	ldr	r0, [pc, #140]	@ (80005bc <main+0xb0>)
 8000530:	f000 fe9c 	bl	800126c <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <main+0xb4>)
 800053a:	701a      	strb	r2, [r3, #0]
        button_right = HAL_GPIO_ReadPin(BT_DIR_GPIO_Port, BT_DIR_Pin);   // Botão de navegação (direita)
 800053c:	2108      	movs	r1, #8
 800053e:	481f      	ldr	r0, [pc, #124]	@ (80005bc <main+0xb0>)
 8000540:	f000 fe94 	bl	800126c <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <main+0xb8>)
 800054a:	701a      	strb	r2, [r3, #0]
        button_up = HAL_GPIO_ReadPin(BT_CIMA_GPIO_Port, BT_CIMA_Pin);   // Botão para aumentar
 800054c:	2110      	movs	r1, #16
 800054e:	481b      	ldr	r0, [pc, #108]	@ (80005bc <main+0xb0>)
 8000550:	f000 fe8c 	bl	800126c <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <main+0xbc>)
 800055a:	701a      	strb	r2, [r3, #0]
        button_down = HAL_GPIO_ReadPin(BT_BAIXO_GPIO_Port, BT_BAIXO_Pin);   // Botão para diminuir
 800055c:	2120      	movs	r1, #32
 800055e:	4817      	ldr	r0, [pc, #92]	@ (80005bc <main+0xb0>)
 8000560:	f000 fe84 	bl	800126c <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	461a      	mov	r2, r3
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <main+0xc0>)
 800056a:	701a      	strb	r2, [r3, #0]

        // Controle do menu e navegação
        keyboard();  // Leitura dos botões e navegação
 800056c:	f000 f858 	bl	8000620 <keyboard>

        // Controle do menu atual
        switch (menu_num)
 8000570:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <main+0xc4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3b01      	subs	r3, #1
 8000576:	2b04      	cmp	r3, #4
 8000578:	d8d8      	bhi.n	800052c <main+0x20>
 800057a:	a201      	add	r2, pc, #4	@ (adr r2, 8000580 <main+0x74>)
 800057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000580:	08000595 	.word	0x08000595
 8000584:	0800059b 	.word	0x0800059b
 8000588:	080005a1 	.word	0x080005a1
 800058c:	080005a7 	.word	0x080005a7
 8000590:	080005ad 	.word	0x080005ad
        {
            case 1: menu1(); break;
 8000594:	f000 f8b0 	bl	80006f8 <menu1>
 8000598:	e00c      	b.n	80005b4 <main+0xa8>
            case 2: menu2(); break;
 800059a:	f000 f8eb 	bl	8000774 <menu2>
 800059e:	e009      	b.n	80005b4 <main+0xa8>
            case 3: menu3(); break;
 80005a0:	f000 f926 	bl	80007f0 <menu3>
 80005a4:	e006      	b.n	80005b4 <main+0xa8>
            case 4: contato(); break;
 80005a6:	f000 f961 	bl	800086c <contato>
 80005aa:	e003      	b.n	80005b4 <main+0xa8>
            case 5: parametrizacao(); break; // Menu para os valores de 1980 a 2060
 80005ac:	f000 f980 	bl	80008b0 <parametrizacao>
 80005b0:	bf00      	nop
 80005b2:	e7bb      	b.n	800052c <main+0x20>
        button_confirm = HAL_GPIO_ReadPin(BT_ESQ_GPIO_Port, BT_ESQ_Pin);   // Botão de confirmação (esquerda)
 80005b4:	e7ba      	b.n	800052c <main+0x20>
 80005b6:	bf00      	nop
 80005b8:	20000088 	.word	0x20000088
 80005bc:	40010800 	.word	0x40010800
 80005c0:	20000084 	.word	0x20000084
 80005c4:	20000085 	.word	0x20000085
 80005c8:	20000086 	.word	0x20000086
 80005cc:	20000087 	.word	0x20000087
 80005d0:	20000000 	.word	0x20000000

080005d4 <apresentacao>:
    }
}

// Função para exibir a apresentação ao ligar
void apresentacao()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    clear(&lcd);
 80005d8:	480e      	ldr	r0, [pc, #56]	@ (8000614 <apresentacao+0x40>)
 80005da:	f7ff fe91 	bl	8000300 <clear>
    setCursor(&lcd, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	480c      	ldr	r0, [pc, #48]	@ (8000614 <apresentacao+0x40>)
 80005e4:	f7ff ff62 	bl	80004ac <setCursor>
    print(&lcd, (int8_t *)"   BEM-VINDO   ");
 80005e8:	490b      	ldr	r1, [pc, #44]	@ (8000618 <apresentacao+0x44>)
 80005ea:	480a      	ldr	r0, [pc, #40]	@ (8000614 <apresentacao+0x40>)
 80005ec:	f7ff fe66 	bl	80002bc <print>
    setCursor(&lcd, 0, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2100      	movs	r1, #0
 80005f4:	4807      	ldr	r0, [pc, #28]	@ (8000614 <apresentacao+0x40>)
 80005f6:	f7ff ff59 	bl	80004ac <setCursor>
    print(&lcd, (int8_t *)"    INDFLOW    ");
 80005fa:	4908      	ldr	r1, [pc, #32]	@ (800061c <apresentacao+0x48>)
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <apresentacao+0x40>)
 80005fe:	f7ff fe5d 	bl	80002bc <print>

    HAL_Delay(5000);  // Delay de 5 segundos
 8000602:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000606:	f000 fba5 	bl	8000d54 <HAL_Delay>

    clear(&lcd);  // Limpa a tela após o delay
 800060a:	4802      	ldr	r0, [pc, #8]	@ (8000614 <apresentacao+0x40>)
 800060c:	f7ff fe78 	bl	8000300 <clear>
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000088 	.word	0x20000088
 8000618:	08002428 	.word	0x08002428
 800061c:	08002438 	.word	0x08002438

08000620 <keyboard>:

// Função de navegação do menu com os botões
void keyboard()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    // Navegação entre as opções de menu com o botão direito
    if (button_right == GPIO_PIN_SET && sub_menu == 1)  // Quando estiver no menu principal
 8000624:	4b2d      	ldr	r3, [pc, #180]	@ (80006dc <keyboard+0xbc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d113      	bne.n	8000654 <keyboard+0x34>
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <keyboard+0xc0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d10f      	bne.n	8000654 <keyboard+0x34>
    {
        HAL_Delay(50);  // Debounce
 8000634:	2032      	movs	r0, #50	@ 0x32
 8000636:	f000 fb8d 	bl	8000d54 <HAL_Delay>
        if (menu_num < menu_max)
 800063a:	4b2a      	ldr	r3, [pc, #168]	@ (80006e4 <keyboard+0xc4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b04      	cmp	r3, #4
 8000640:	dc05      	bgt.n	800064e <keyboard+0x2e>
            menu_num += 1;  // Avança para a próxima opção
 8000642:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <keyboard+0xc4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a26      	ldr	r2, [pc, #152]	@ (80006e4 <keyboard+0xc4>)
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	e002      	b.n	8000654 <keyboard+0x34>
        else
            menu_num = 1;   // Volta para a primeira opção se estiver na última
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <keyboard+0xc4>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
    }

    // Confirmação com o botão esquerdo (entrar ou sair do submenu)
    if (button_confirm == GPIO_PIN_SET)
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <keyboard+0xc8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d111      	bne.n	8000680 <keyboard+0x60>
    {
        HAL_Delay(50);  // Debounce
 800065c:	2032      	movs	r0, #50	@ 0x32
 800065e:	f000 fb79 	bl	8000d54 <HAL_Delay>
        if (sub_menu == 1)  // Se estiver no menu principal, entra no submenu
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <keyboard+0xc0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d103      	bne.n	8000672 <keyboard+0x52>
        {
            sub_menu = 2;  // Entra no submenu
 800066a:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <keyboard+0xc0>)
 800066c:	2202      	movs	r2, #2
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	e006      	b.n	8000680 <keyboard+0x60>
        }
        else if (sub_menu == 2)  // Se estiver no submenu, volta para o menu principal
 8000672:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <keyboard+0xc0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b02      	cmp	r3, #2
 8000678:	d102      	bne.n	8000680 <keyboard+0x60>
        {
            sub_menu = 1;  // Volta para o menu principal
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <keyboard+0xc0>)
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
        }
    }

    // Navegação nos valores com os botões cima e baixo no submenu
    if (sub_menu == 2 && menu_num == 5)  // Se estiver no submenu de valores
 8000680:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <keyboard+0xc0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d127      	bne.n	80006d8 <keyboard+0xb8>
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <keyboard+0xc4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b05      	cmp	r3, #5
 800068e:	d123      	bne.n	80006d8 <keyboard+0xb8>
    {
        // Aumenta o valor com o botão de cima
        if (button_up == GPIO_PIN_SET)
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <keyboard+0xcc>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d10d      	bne.n	80006b4 <keyboard+0x94>
        {
            HAL_Delay(50);
 8000698:	2032      	movs	r0, #50	@ 0x32
 800069a:	f000 fb5b 	bl	8000d54 <HAL_Delay>
            if (current_value < max_value) current_value += 1;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <keyboard+0xd0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f640 020b 	movw	r2, #2059	@ 0x80b
 80006a6:	4293      	cmp	r3, r2
 80006a8:	dc04      	bgt.n	80006b4 <keyboard+0x94>
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <keyboard+0xd0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <keyboard+0xd0>)
 80006b2:	6013      	str	r3, [r2, #0]
        }

        // Diminui o valor com o botão de baixo
        if (button_down == GPIO_PIN_SET)
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <keyboard+0xd4>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d10d      	bne.n	80006d8 <keyboard+0xb8>
        {
            HAL_Delay(50);
 80006bc:	2032      	movs	r0, #50	@ 0x32
 80006be:	f000 fb49 	bl	8000d54 <HAL_Delay>
            if (current_value > min_value) current_value -= 1;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <keyboard+0xd0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f240 72bc 	movw	r2, #1980	@ 0x7bc
 80006ca:	4293      	cmp	r3, r2
 80006cc:	dd04      	ble.n	80006d8 <keyboard+0xb8>
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <keyboard+0xd0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <keyboard+0xd0>)
 80006d6:	6013      	str	r3, [r2, #0]
        }
    }
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000085 	.word	0x20000085
 80006e0:	20000004 	.word	0x20000004
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000084 	.word	0x20000084
 80006ec:	20000086 	.word	0x20000086
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000087 	.word	0x20000087

080006f8 <menu1>:

// Funções dos menus
void menu1()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    switch (sub_menu)
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <menu1+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d002      	beq.n	800070a <menu1+0x12>
 8000704:	2b02      	cmp	r3, #2
 8000706:	d013      	beq.n	8000730 <menu1+0x38>
            print(&lcd, (int8_t *)"   Voltimetro   ");
            setCursor(&lcd, 0, 1);
            print(&lcd, (int8_t *)"   10.0 Volts   ");
            break;
    }
}
 8000708:	e025      	b.n	8000756 <menu1+0x5e>
            setCursor(&lcd, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	4814      	ldr	r0, [pc, #80]	@ (8000760 <menu1+0x68>)
 8000710:	f7ff fecc 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   Voltimetro  >");
 8000714:	4913      	ldr	r1, [pc, #76]	@ (8000764 <menu1+0x6c>)
 8000716:	4812      	ldr	r0, [pc, #72]	@ (8000760 <menu1+0x68>)
 8000718:	f7ff fdd0 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	2100      	movs	r1, #0
 8000720:	480f      	ldr	r0, [pc, #60]	@ (8000760 <menu1+0x68>)
 8000722:	f7ff fec3 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"                ");
 8000726:	4910      	ldr	r1, [pc, #64]	@ (8000768 <menu1+0x70>)
 8000728:	480d      	ldr	r0, [pc, #52]	@ (8000760 <menu1+0x68>)
 800072a:	f7ff fdc7 	bl	80002bc <print>
            break;
 800072e:	e012      	b.n	8000756 <menu1+0x5e>
            setCursor(&lcd, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	480a      	ldr	r0, [pc, #40]	@ (8000760 <menu1+0x68>)
 8000736:	f7ff feb9 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   Voltimetro   ");
 800073a:	490c      	ldr	r1, [pc, #48]	@ (800076c <menu1+0x74>)
 800073c:	4808      	ldr	r0, [pc, #32]	@ (8000760 <menu1+0x68>)
 800073e:	f7ff fdbd 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	2100      	movs	r1, #0
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <menu1+0x68>)
 8000748:	f7ff feb0 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   10.0 Volts   ");
 800074c:	4908      	ldr	r1, [pc, #32]	@ (8000770 <menu1+0x78>)
 800074e:	4804      	ldr	r0, [pc, #16]	@ (8000760 <menu1+0x68>)
 8000750:	f7ff fdb4 	bl	80002bc <print>
            break;
 8000754:	bf00      	nop
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000004 	.word	0x20000004
 8000760:	20000088 	.word	0x20000088
 8000764:	08002448 	.word	0x08002448
 8000768:	0800245c 	.word	0x0800245c
 800076c:	08002470 	.word	0x08002470
 8000770:	08002484 	.word	0x08002484

08000774 <menu2>:

void menu2()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    switch (sub_menu)
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <menu2+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d002      	beq.n	8000786 <menu2+0x12>
 8000780:	2b02      	cmp	r3, #2
 8000782:	d013      	beq.n	80007ac <menu2+0x38>
            print(&lcd, (int8_t *)"   Amperimetro  ");
            setCursor(&lcd, 0, 1);
            print(&lcd, (int8_t *)"    1.5 Amps    ");
            break;
    }
}
 8000784:	e025      	b.n	80007d2 <menu2+0x5e>
            setCursor(&lcd, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	4814      	ldr	r0, [pc, #80]	@ (80007dc <menu2+0x68>)
 800078c:	f7ff fe8e 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"<  Amperimetro >");
 8000790:	4913      	ldr	r1, [pc, #76]	@ (80007e0 <menu2+0x6c>)
 8000792:	4812      	ldr	r0, [pc, #72]	@ (80007dc <menu2+0x68>)
 8000794:	f7ff fd92 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	2100      	movs	r1, #0
 800079c:	480f      	ldr	r0, [pc, #60]	@ (80007dc <menu2+0x68>)
 800079e:	f7ff fe85 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"                ");
 80007a2:	4910      	ldr	r1, [pc, #64]	@ (80007e4 <menu2+0x70>)
 80007a4:	480d      	ldr	r0, [pc, #52]	@ (80007dc <menu2+0x68>)
 80007a6:	f7ff fd89 	bl	80002bc <print>
            break;
 80007aa:	e012      	b.n	80007d2 <menu2+0x5e>
            setCursor(&lcd, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	480a      	ldr	r0, [pc, #40]	@ (80007dc <menu2+0x68>)
 80007b2:	f7ff fe7b 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   Amperimetro  ");
 80007b6:	490c      	ldr	r1, [pc, #48]	@ (80007e8 <menu2+0x74>)
 80007b8:	4808      	ldr	r0, [pc, #32]	@ (80007dc <menu2+0x68>)
 80007ba:	f7ff fd7f 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 80007be:	2201      	movs	r2, #1
 80007c0:	2100      	movs	r1, #0
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <menu2+0x68>)
 80007c4:	f7ff fe72 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"    1.5 Amps    ");
 80007c8:	4908      	ldr	r1, [pc, #32]	@ (80007ec <menu2+0x78>)
 80007ca:	4804      	ldr	r0, [pc, #16]	@ (80007dc <menu2+0x68>)
 80007cc:	f7ff fd76 	bl	80002bc <print>
            break;
 80007d0:	bf00      	nop
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000004 	.word	0x20000004
 80007dc:	20000088 	.word	0x20000088
 80007e0:	08002498 	.word	0x08002498
 80007e4:	0800245c 	.word	0x0800245c
 80007e8:	080024ac 	.word	0x080024ac
 80007ec:	080024c0 	.word	0x080024c0

080007f0 <menu3>:

void menu3()
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
    switch (sub_menu)
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <menu3+0x64>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d002      	beq.n	8000802 <menu3+0x12>
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d013      	beq.n	8000828 <menu3+0x38>
            print(&lcd, (int8_t *)"   Ohmimetro    ");
            setCursor(&lcd, 0, 1);
            print(&lcd, (int8_t *)"    100 Ohms    ");
            break;
    }
}
 8000800:	e025      	b.n	800084e <menu3+0x5e>
            setCursor(&lcd, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	4814      	ldr	r0, [pc, #80]	@ (8000858 <menu3+0x68>)
 8000808:	f7ff fe50 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"<  Ohmimetro   >");
 800080c:	4913      	ldr	r1, [pc, #76]	@ (800085c <menu3+0x6c>)
 800080e:	4812      	ldr	r0, [pc, #72]	@ (8000858 <menu3+0x68>)
 8000810:	f7ff fd54 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	2100      	movs	r1, #0
 8000818:	480f      	ldr	r0, [pc, #60]	@ (8000858 <menu3+0x68>)
 800081a:	f7ff fe47 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"                ");
 800081e:	4910      	ldr	r1, [pc, #64]	@ (8000860 <menu3+0x70>)
 8000820:	480d      	ldr	r0, [pc, #52]	@ (8000858 <menu3+0x68>)
 8000822:	f7ff fd4b 	bl	80002bc <print>
            break;
 8000826:	e012      	b.n	800084e <menu3+0x5e>
            setCursor(&lcd, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	480a      	ldr	r0, [pc, #40]	@ (8000858 <menu3+0x68>)
 800082e:	f7ff fe3d 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"   Ohmimetro    ");
 8000832:	490c      	ldr	r1, [pc, #48]	@ (8000864 <menu3+0x74>)
 8000834:	4808      	ldr	r0, [pc, #32]	@ (8000858 <menu3+0x68>)
 8000836:	f7ff fd41 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	2100      	movs	r1, #0
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <menu3+0x68>)
 8000840:	f7ff fe34 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"    100 Ohms    ");
 8000844:	4908      	ldr	r1, [pc, #32]	@ (8000868 <menu3+0x78>)
 8000846:	4804      	ldr	r0, [pc, #16]	@ (8000858 <menu3+0x68>)
 8000848:	f7ff fd38 	bl	80002bc <print>
            break;
 800084c:	bf00      	nop
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000004 	.word	0x20000004
 8000858:	20000088 	.word	0x20000088
 800085c:	080024d4 	.word	0x080024d4
 8000860:	0800245c 	.word	0x0800245c
 8000864:	080024e8 	.word	0x080024e8
 8000868:	080024fc 	.word	0x080024fc

0800086c <contato>:

void contato()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    switch (sub_menu)
 8000870:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <contato+0x34>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d111      	bne.n	800089c <contato+0x30>
    {
    	case 1:
			setCursor(&lcd, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <contato+0x38>)
 800087e:	f7ff fe15 	bl	80004ac <setCursor>
			print(&lcd, (int8_t *)" INF DE CONTATO ");
 8000882:	4909      	ldr	r1, [pc, #36]	@ (80008a8 <contato+0x3c>)
 8000884:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <contato+0x38>)
 8000886:	f7ff fd19 	bl	80002bc <print>
			setCursor(&lcd, 0, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	2100      	movs	r1, #0
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <contato+0x38>)
 8000890:	f7ff fe0c 	bl	80004ac <setCursor>
			print(&lcd, (int8_t *)"+55 11 5522-4655 ");
 8000894:	4905      	ldr	r1, [pc, #20]	@ (80008ac <contato+0x40>)
 8000896:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <contato+0x38>)
 8000898:	f7ff fd10 	bl	80002bc <print>
    }
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000004 	.word	0x20000004
 80008a4:	20000088 	.word	0x20000088
 80008a8:	08002510 	.word	0x08002510
 80008ac:	08002524 	.word	0x08002524

080008b0 <parametrizacao>:

void parametrizacao()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
    // Submenu para modificar o valor
    switch (sub_menu)
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <parametrizacao+0x88>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d002      	beq.n	80008c4 <parametrizacao+0x14>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d01b      	beq.n	80008fa <parametrizacao+0x4a>
            setCursor(&lcd, 0, 1);
            snprintf(buffer, sizeof(buffer), "   Ano:    %d   ", current_value);
            print(&lcd, (int8_t *)buffer);
            break;
    }
}
 80008c2:	e035      	b.n	8000930 <parametrizacao+0x80>
            setCursor(&lcd, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	481c      	ldr	r0, [pc, #112]	@ (800093c <parametrizacao+0x8c>)
 80008ca:	f7ff fdef 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)"< PARAMETRIZACAO >");
 80008ce:	491c      	ldr	r1, [pc, #112]	@ (8000940 <parametrizacao+0x90>)
 80008d0:	481a      	ldr	r0, [pc, #104]	@ (800093c <parametrizacao+0x8c>)
 80008d2:	f7ff fcf3 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2100      	movs	r1, #0
 80008da:	4818      	ldr	r0, [pc, #96]	@ (800093c <parametrizacao+0x8c>)
 80008dc:	f7ff fde6 	bl	80004ac <setCursor>
            snprintf(buffer, sizeof(buffer), "SENHA:     %d ", current_value);
 80008e0:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <parametrizacao+0x94>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4638      	mov	r0, r7
 80008e6:	4a18      	ldr	r2, [pc, #96]	@ (8000948 <parametrizacao+0x98>)
 80008e8:	2110      	movs	r1, #16
 80008ea:	f001 f8cd 	bl	8001a88 <sniprintf>
            print(&lcd, (int8_t *)buffer);
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4812      	ldr	r0, [pc, #72]	@ (800093c <parametrizacao+0x8c>)
 80008f4:	f7ff fce2 	bl	80002bc <print>
            break;
 80008f8:	e01a      	b.n	8000930 <parametrizacao+0x80>
            setCursor(&lcd, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	480f      	ldr	r0, [pc, #60]	@ (800093c <parametrizacao+0x8c>)
 8000900:	f7ff fdd4 	bl	80004ac <setCursor>
            print(&lcd, (int8_t *)" PARAMETRIZACAO ");
 8000904:	4911      	ldr	r1, [pc, #68]	@ (800094c <parametrizacao+0x9c>)
 8000906:	480d      	ldr	r0, [pc, #52]	@ (800093c <parametrizacao+0x8c>)
 8000908:	f7ff fcd8 	bl	80002bc <print>
            setCursor(&lcd, 0, 1);
 800090c:	2201      	movs	r2, #1
 800090e:	2100      	movs	r1, #0
 8000910:	480a      	ldr	r0, [pc, #40]	@ (800093c <parametrizacao+0x8c>)
 8000912:	f7ff fdcb 	bl	80004ac <setCursor>
            snprintf(buffer, sizeof(buffer), "   Ano:    %d   ", current_value);
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <parametrizacao+0x94>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4638      	mov	r0, r7
 800091c:	4a0c      	ldr	r2, [pc, #48]	@ (8000950 <parametrizacao+0xa0>)
 800091e:	2110      	movs	r1, #16
 8000920:	f001 f8b2 	bl	8001a88 <sniprintf>
            print(&lcd, (int8_t *)buffer);
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <parametrizacao+0x8c>)
 800092a:	f7ff fcc7 	bl	80002bc <print>
            break;
 800092e:	bf00      	nop
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000004 	.word	0x20000004
 800093c:	20000088 	.word	0x20000088
 8000940:	08002538 	.word	0x08002538
 8000944:	20000008 	.word	0x20000008
 8000948:	0800254c 	.word	0x0800254c
 800094c:	0800255c 	.word	0x0800255c
 8000950:	08002570 	.word	0x08002570

08000954 <SystemClock_Config>:


//Configuração do relógio do sistema
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b090      	sub	sp, #64	@ 0x40
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	2228      	movs	r2, #40	@ 0x28
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f8c4 	bl	8001af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800097e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000988:	2302      	movs	r3, #2
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000990:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000992:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fc95 	bl	80012cc <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009a8:	f000 f8ac 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2302      	movs	r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2102      	movs	r1, #2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 ff02 	bl	80017d0 <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009d2:	f000 f897 	bl	8000b04 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3740      	adds	r7, #64	@ 0x40
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <MX_GPIO_Init>:

/**
Função de inicialização GPIO
*/
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f4:	4b3f      	ldr	r3, [pc, #252]	@ (8000af4 <MX_GPIO_Init+0x114>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a3e      	ldr	r2, [pc, #248]	@ (8000af4 <MX_GPIO_Init+0x114>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b3c      	ldr	r3, [pc, #240]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0c:	4b39      	ldr	r3, [pc, #228]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a38      	ldr	r2, [pc, #224]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b36      	ldr	r3, [pc, #216]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0320 	and.w	r3, r3, #32
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b33      	ldr	r3, [pc, #204]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b30      	ldr	r3, [pc, #192]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a2c      	ldr	r2, [pc, #176]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b2a      	ldr	r3, [pc, #168]	@ (8000af4 <MX_GPIO_Init+0x114>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4827      	ldr	r0, [pc, #156]	@ (8000af8 <MX_GPIO_Init+0x118>)
 8000a5c:	f000 fc1d 	bl	800129a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_E_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000a60:	2200      	movs	r2, #0
 8000a62:	f246 1118 	movw	r1, #24856	@ 0x6118
 8000a66:	4825      	ldr	r0, [pc, #148]	@ (8000afc <MX_GPIO_Init+0x11c>)
 8000a68:	f000 fc17 	bl	800129a <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a72:	4823      	ldr	r0, [pc, #140]	@ (8000b00 <MX_GPIO_Init+0x120>)
 8000a74:	f000 fc11 	bl	800129a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_VERMELHO_Pin */
  GPIO_InitStruct.Pin = LED_VERMELHO_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_VERMELHO_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4819      	ldr	r0, [pc, #100]	@ (8000af8 <MX_GPIO_Init+0x118>)
 8000a92:	f000 fa67 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DIR_Pin BT_CIMA_Pin BT_BAIXO_Pin BT_ESQ_Pin */
  GPIO_InitStruct.Pin = BT_DIR_Pin|BT_CIMA_Pin|BT_BAIXO_Pin|BT_ESQ_Pin;
 8000a96:	2378      	movs	r3, #120	@ 0x78
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4815      	ldr	r0, [pc, #84]	@ (8000b00 <MX_GPIO_Init+0x120>)
 8000aaa:	f000 fa5b 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000aae:	f246 1318 	movw	r3, #24856	@ 0x6118
 8000ab2:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_GPIO_Init+0x11c>)
 8000ac8:	f000 fa4c 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin;
 8000acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_GPIO_Init+0x120>)
 8000ae6:	f000 fa3d 	bl	8000f64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	40010800 	.word	0x40010800

08000b04 <Error_Handler>:

void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a0e      	ldr	r2, [pc, #56]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <HAL_MspInit+0x5c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <HAL_MspInit+0x60>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <HAL_MspInit+0x60>)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8aa 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f000 ff80 	bl	8001b00 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20005000 	.word	0x20005000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	20000090 	.word	0x20000090
 8000c34:	200001e0 	.word	0x200001e0

08000c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c44:	f7ff fff8 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c4a:	490c      	ldr	r1, [pc, #48]	@ (8000c7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a09      	ldr	r2, [pc, #36]	@ (8000c84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c60:	4c09      	ldr	r4, [pc, #36]	@ (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f000 ff4d 	bl	8001b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c72:	f7ff fc4b 	bl	800050c <main>
  bx lr
 8000c76:	4770      	bx	lr
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c80:	080025ec 	.word	0x080025ec
  ldr r2, =_sbss
 8000c84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c88:	200001e0 	.word	0x200001e0

08000c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_2_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_Init+0x28>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <HAL_Init+0x28>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f92b 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	200f      	movs	r0, #15
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff ff30 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40022000 	.word	0x40022000

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f935 	bl	8000f4a <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f90b 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	@ (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000000c 	.word	0x2000000c
 8000d14:	20000014 	.word	0x20000014
 8000d18:	20000010 	.word	0x20000010

08000d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_IncTick+0x1c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000014 	.word	0x20000014
 8000d3c:	20000094 	.word	0x20000094

08000d40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b02      	ldr	r3, [pc, #8]	@ (8000d50 <HAL_GetTick+0x10>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	20000094 	.word	0x20000094

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff fff0 	bl	8000d40 <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffe0 	bl	8000d40 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000014 	.word	0x20000014

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff49 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff5e 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb0 	bl	8000eb8 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b08b      	sub	sp, #44	@ 0x2c
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e169      	b.n	800124c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f040 8158 	bne.w	8001246 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a9a      	ldr	r2, [pc, #616]	@ (8001204 <HAL_GPIO_Init+0x2a0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d05e      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fa0:	4a98      	ldr	r2, [pc, #608]	@ (8001204 <HAL_GPIO_Init+0x2a0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d875      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fa6:	4a98      	ldr	r2, [pc, #608]	@ (8001208 <HAL_GPIO_Init+0x2a4>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d058      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fac:	4a96      	ldr	r2, [pc, #600]	@ (8001208 <HAL_GPIO_Init+0x2a4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d86f      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fb2:	4a96      	ldr	r2, [pc, #600]	@ (800120c <HAL_GPIO_Init+0x2a8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d052      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fb8:	4a94      	ldr	r2, [pc, #592]	@ (800120c <HAL_GPIO_Init+0x2a8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d869      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fbe:	4a94      	ldr	r2, [pc, #592]	@ (8001210 <HAL_GPIO_Init+0x2ac>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d04c      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fc4:	4a92      	ldr	r2, [pc, #584]	@ (8001210 <HAL_GPIO_Init+0x2ac>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d863      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fca:	4a92      	ldr	r2, [pc, #584]	@ (8001214 <HAL_GPIO_Init+0x2b0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d046      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fd0:	4a90      	ldr	r2, [pc, #576]	@ (8001214 <HAL_GPIO_Init+0x2b0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d85d      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fd6:	2b12      	cmp	r3, #18
 8000fd8:	d82a      	bhi.n	8001030 <HAL_GPIO_Init+0xcc>
 8000fda:	2b12      	cmp	r3, #18
 8000fdc:	d859      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fde:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe4 <HAL_GPIO_Init+0x80>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	0800105f 	.word	0x0800105f
 8000fe8:	08001039 	.word	0x08001039
 8000fec:	0800104b 	.word	0x0800104b
 8000ff0:	0800108d 	.word	0x0800108d
 8000ff4:	08001093 	.word	0x08001093
 8000ff8:	08001093 	.word	0x08001093
 8000ffc:	08001093 	.word	0x08001093
 8001000:	08001093 	.word	0x08001093
 8001004:	08001093 	.word	0x08001093
 8001008:	08001093 	.word	0x08001093
 800100c:	08001093 	.word	0x08001093
 8001010:	08001093 	.word	0x08001093
 8001014:	08001093 	.word	0x08001093
 8001018:	08001093 	.word	0x08001093
 800101c:	08001093 	.word	0x08001093
 8001020:	08001093 	.word	0x08001093
 8001024:	08001093 	.word	0x08001093
 8001028:	08001041 	.word	0x08001041
 800102c:	08001055 	.word	0x08001055
 8001030:	4a79      	ldr	r2, [pc, #484]	@ (8001218 <HAL_GPIO_Init+0x2b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001036:	e02c      	b.n	8001092 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e029      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	3304      	adds	r3, #4
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e024      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	3308      	adds	r3, #8
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e01f      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	330c      	adds	r3, #12
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e01a      	b.n	8001094 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001066:	2304      	movs	r3, #4
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e013      	b.n	8001094 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001074:	2308      	movs	r3, #8
 8001076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	611a      	str	r2, [r3, #16]
          break;
 800107e:	e009      	b.n	8001094 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001080:	2308      	movs	r3, #8
 8001082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	615a      	str	r2, [r3, #20]
          break;
 800108a:	e003      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x130>
          break;
 8001092:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2bff      	cmp	r3, #255	@ 0xff
 8001098:	d801      	bhi.n	800109e <HAL_GPIO_Init+0x13a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	e001      	b.n	80010a2 <HAL_GPIO_Init+0x13e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3304      	adds	r3, #4
 80010a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2bff      	cmp	r3, #255	@ 0xff
 80010a8:	d802      	bhi.n	80010b0 <HAL_GPIO_Init+0x14c>
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	e002      	b.n	80010b6 <HAL_GPIO_Init+0x152>
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	3b08      	subs	r3, #8
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	210f      	movs	r1, #15
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	401a      	ands	r2, r3
 80010c8:	6a39      	ldr	r1, [r7, #32]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80b1 	beq.w	8001246 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e4:	4b4d      	ldr	r3, [pc, #308]	@ (800121c <HAL_GPIO_Init+0x2b8>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a4c      	ldr	r2, [pc, #304]	@ (800121c <HAL_GPIO_Init+0x2b8>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b4a      	ldr	r3, [pc, #296]	@ (800121c <HAL_GPIO_Init+0x2b8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010fc:	4a48      	ldr	r2, [pc, #288]	@ (8001220 <HAL_GPIO_Init+0x2bc>)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a40      	ldr	r2, [pc, #256]	@ (8001224 <HAL_GPIO_Init+0x2c0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d013      	beq.n	8001150 <HAL_GPIO_Init+0x1ec>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a3f      	ldr	r2, [pc, #252]	@ (8001228 <HAL_GPIO_Init+0x2c4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00d      	beq.n	800114c <HAL_GPIO_Init+0x1e8>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a3e      	ldr	r2, [pc, #248]	@ (800122c <HAL_GPIO_Init+0x2c8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x1e4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a3d      	ldr	r2, [pc, #244]	@ (8001230 <HAL_GPIO_Init+0x2cc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_GPIO_Init+0x1e0>
 8001140:	2303      	movs	r3, #3
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001144:	2304      	movs	r3, #4
 8001146:	e004      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001148:	2302      	movs	r3, #2
 800114a:	e002      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001150:	2300      	movs	r3, #0
 8001152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001154:	f002 0203 	and.w	r2, r2, #3
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	4093      	lsls	r3, r2
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001162:	492f      	ldr	r1, [pc, #188]	@ (8001220 <HAL_GPIO_Init+0x2bc>)
 8001164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800117c:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	492c      	ldr	r1, [pc, #176]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800118a:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	43db      	mvns	r3, r3
 8001192:	4928      	ldr	r1, [pc, #160]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 8001194:	4013      	ands	r3, r2
 8001196:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	4922      	ldr	r1, [pc, #136]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	60cb      	str	r3, [r1, #12]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	491e      	ldr	r1, [pc, #120]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4918      	ldr	r1, [pc, #96]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4914      	ldr	r1, [pc, #80]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d021      	beq.n	8001238 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	490e      	ldr	r1, [pc, #56]	@ (8001234 <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
 8001200:	e021      	b.n	8001246 <HAL_GPIO_Init+0x2e2>
 8001202:	bf00      	nop
 8001204:	10320000 	.word	0x10320000
 8001208:	10310000 	.word	0x10310000
 800120c:	10220000 	.word	0x10220000
 8001210:	10210000 	.word	0x10210000
 8001214:	10120000 	.word	0x10120000
 8001218:	10110000 	.word	0x10110000
 800121c:	40021000 	.word	0x40021000
 8001220:	40010000 	.word	0x40010000
 8001224:	40010800 	.word	0x40010800
 8001228:	40010c00 	.word	0x40010c00
 800122c:	40011000 	.word	0x40011000
 8001230:	40011400 	.word	0x40011400
 8001234:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_GPIO_Init+0x304>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	43db      	mvns	r3, r3
 8001240:	4909      	ldr	r1, [pc, #36]	@ (8001268 <HAL_GPIO_Init+0x304>)
 8001242:	4013      	ands	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	3301      	adds	r3, #1
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	fa22 f303 	lsr.w	r3, r2, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	f47f ae8e 	bne.w	8000f78 <HAL_GPIO_Init+0x14>
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	372c      	adds	r7, #44	@ 0x2c
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e001      	b.n	800128e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]
 80012a6:	4613      	mov	r3, r2
 80012a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012aa:	787b      	ldrb	r3, [r7, #1]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b0:	887a      	ldrh	r2, [r7, #2]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b6:	e003      	b.n	80012c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	611a      	str	r2, [r3, #16]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e272      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8087 	beq.w	80013fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ec:	4b92      	ldr	r3, [pc, #584]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d00c      	beq.n	8001312 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f8:	4b8f      	ldr	r3, [pc, #572]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b08      	cmp	r3, #8
 8001302:	d112      	bne.n	800132a <HAL_RCC_OscConfig+0x5e>
 8001304:	4b8c      	ldr	r3, [pc, #560]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001310:	d10b      	bne.n	800132a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001312:	4b89      	ldr	r3, [pc, #548]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d06c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x12c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d168      	bne.n	80013f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e24c      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001332:	d106      	bne.n	8001342 <HAL_RCC_OscConfig+0x76>
 8001334:	4b80      	ldr	r3, [pc, #512]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a7f      	ldr	r2, [pc, #508]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800133a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e02e      	b.n	80013a0 <HAL_RCC_OscConfig+0xd4>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x98>
 800134a:	4b7b      	ldr	r3, [pc, #492]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7a      	ldr	r2, [pc, #488]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b78      	ldr	r3, [pc, #480]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a77      	ldr	r2, [pc, #476]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800135c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e01d      	b.n	80013a0 <HAL_RCC_OscConfig+0xd4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0xbc>
 800136e:	4b72      	ldr	r3, [pc, #456]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a71      	ldr	r2, [pc, #452]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b6f      	ldr	r3, [pc, #444]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6e      	ldr	r2, [pc, #440]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0xd4>
 8001388:	4b6b      	ldr	r3, [pc, #428]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a6a      	ldr	r2, [pc, #424]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b68      	ldr	r3, [pc, #416]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a67      	ldr	r2, [pc, #412]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d013      	beq.n	80013d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fcca 	bl	8000d40 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fcc6 	bl	8000d40 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	@ 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e200      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0xe4>
 80013ce:	e014      	b.n	80013fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fcb6 	bl	8000d40 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fcb2 	bl	8000d40 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1ec      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	4b53      	ldr	r3, [pc, #332]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x10c>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d063      	beq.n	80014ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001406:	4b4c      	ldr	r3, [pc, #304]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001412:	4b49      	ldr	r3, [pc, #292]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b08      	cmp	r3, #8
 800141c:	d11c      	bne.n	8001458 <HAL_RCC_OscConfig+0x18c>
 800141e:	4b46      	ldr	r3, [pc, #280]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d116      	bne.n	8001458 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	4b43      	ldr	r3, [pc, #268]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x176>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e1c0      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b3d      	ldr	r3, [pc, #244]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4939      	ldr	r1, [pc, #228]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	e03a      	b.n	80014ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	4b36      	ldr	r3, [pc, #216]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fc6b 	bl	8000d40 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fc67 	bl	8000d40 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1a1      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4927      	ldr	r1, [pc, #156]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e015      	b.n	80014ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a2:	4b26      	ldr	r3, [pc, #152]	@ (800153c <HAL_RCC_OscConfig+0x270>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fc4a 	bl	8000d40 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fc46 	bl	8000d40 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e180      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d03a      	beq.n	8001550 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d019      	beq.n	8001516 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_RCC_OscConfig+0x274>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fc2a 	bl	8000d40 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fc26 	bl	8000d40 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e160      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <HAL_RCC_OscConfig+0x26c>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800150e:	2001      	movs	r0, #1
 8001510:	f000 fa9c 	bl	8001a4c <RCC_Delay>
 8001514:	e01c      	b.n	8001550 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_RCC_OscConfig+0x274>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151c:	f7ff fc10 	bl	8000d40 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001522:	e00f      	b.n	8001544 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff fc0c 	bl	8000d40 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d908      	bls.n	8001544 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e146      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	42420000 	.word	0x42420000
 8001540:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	4b92      	ldr	r3, [pc, #584]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e9      	bne.n	8001524 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80a6 	beq.w	80016aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001562:	4b8b      	ldr	r3, [pc, #556]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10d      	bne.n	800158a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b88      	ldr	r3, [pc, #544]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a87      	ldr	r2, [pc, #540]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b85      	ldr	r3, [pc, #532]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b82      	ldr	r3, [pc, #520]	@ (8001794 <HAL_RCC_OscConfig+0x4c8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d118      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001596:	4b7f      	ldr	r3, [pc, #508]	@ (8001794 <HAL_RCC_OscConfig+0x4c8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a7e      	ldr	r2, [pc, #504]	@ (8001794 <HAL_RCC_OscConfig+0x4c8>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fbcd 	bl	8000d40 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015aa:	f7ff fbc9 	bl	8000d40 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b64      	cmp	r3, #100	@ 0x64
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e103      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	4b75      	ldr	r3, [pc, #468]	@ (8001794 <HAL_RCC_OscConfig+0x4c8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x312>
 80015d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6213      	str	r3, [r2, #32]
 80015dc:	e02d      	b.n	800163a <HAL_RCC_OscConfig+0x36e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x334>
 80015e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a69      	ldr	r2, [pc, #420]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6213      	str	r3, [r2, #32]
 80015f2:	4b67      	ldr	r3, [pc, #412]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a66      	ldr	r2, [pc, #408]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	f023 0304 	bic.w	r3, r3, #4
 80015fc:	6213      	str	r3, [r2, #32]
 80015fe:	e01c      	b.n	800163a <HAL_RCC_OscConfig+0x36e>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b05      	cmp	r3, #5
 8001606:	d10c      	bne.n	8001622 <HAL_RCC_OscConfig+0x356>
 8001608:	4b61      	ldr	r3, [pc, #388]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a60      	ldr	r2, [pc, #384]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6213      	str	r3, [r2, #32]
 8001614:	4b5e      	ldr	r3, [pc, #376]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a5d      	ldr	r2, [pc, #372]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	e00b      	b.n	800163a <HAL_RCC_OscConfig+0x36e>
 8001622:	4b5b      	ldr	r3, [pc, #364]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a5a      	ldr	r2, [pc, #360]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	4b58      	ldr	r3, [pc, #352]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a57      	ldr	r2, [pc, #348]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d015      	beq.n	800166e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fb7d 	bl	8000d40 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff fb79 	bl	8000d40 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e0b1      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	4b4b      	ldr	r3, [pc, #300]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0ee      	beq.n	800164a <HAL_RCC_OscConfig+0x37e>
 800166c:	e014      	b.n	8001698 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff fb67 	bl	8000d40 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fb63 	bl	8000d40 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e09b      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	4b40      	ldr	r3, [pc, #256]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ee      	bne.n	8001676 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d105      	bne.n	80016aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169e:	4b3c      	ldr	r3, [pc, #240]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8087 	beq.w	80017c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b4:	4b36      	ldr	r3, [pc, #216]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d061      	beq.n	8001784 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d146      	bne.n	8001756 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c8:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <HAL_RCC_OscConfig+0x4cc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb37 	bl	8000d40 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fb33 	bl	8000d40 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e06d      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e8:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f0      	bne.n	80016d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fc:	d108      	bne.n	8001710 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016fe:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4921      	ldr	r1, [pc, #132]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a19      	ldr	r1, [r3, #32]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	430b      	orrs	r3, r1
 8001722:	491b      	ldr	r1, [pc, #108]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001728:	4b1b      	ldr	r3, [pc, #108]	@ (8001798 <HAL_RCC_OscConfig+0x4cc>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fb07 	bl	8000d40 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff fb03 	bl	8000d40 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e03d      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x46a>
 8001754:	e035      	b.n	80017c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <HAL_RCC_OscConfig+0x4cc>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff faf0 	bl	8000d40 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff faec 	bl	8000d40 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e026      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x498>
 8001782:	e01e      	b.n	80017c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d107      	bne.n	800179c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e019      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
 8001790:	40021000 	.word	0x40021000
 8001794:	40007000 	.word	0x40007000
 8001798:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_RCC_OscConfig+0x500>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0d0      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d910      	bls.n	8001814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b67      	ldr	r3, [pc, #412]	@ (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 0207 	bic.w	r2, r3, #7
 80017fa:	4965      	ldr	r1, [pc, #404]	@ (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b63      	ldr	r3, [pc, #396]	@ (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0b8      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182c:	4b59      	ldr	r3, [pc, #356]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a58      	ldr	r2, [pc, #352]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001836:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001844:	4b53      	ldr	r3, [pc, #332]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a52      	ldr	r2, [pc, #328]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800184e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b50      	ldr	r3, [pc, #320]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	494d      	ldr	r1, [pc, #308]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d040      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b47      	ldr	r3, [pc, #284]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d115      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b41      	ldr	r3, [pc, #260]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e073      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	4b3d      	ldr	r3, [pc, #244]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06b      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ae:	4b39      	ldr	r3, [pc, #228]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4936      	ldr	r1, [pc, #216]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c0:	f7ff fa3e 	bl	8000d40 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	e00a      	b.n	80018de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c8:	f7ff fa3a 	bl	8000d40 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e053      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 020c 	and.w	r2, r3, #12
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1eb      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f0:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d210      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0207 	bic.w	r2, r3, #7
 8001906:	4922      	ldr	r1, [pc, #136]	@ (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e032      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4916      	ldr	r1, [pc, #88]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490e      	ldr	r1, [pc, #56]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800195e:	f000 f821 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490a      	ldr	r1, [pc, #40]	@ (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a09      	ldr	r2, [pc, #36]	@ (800199c <HAL_RCC_ClockConfig+0x1cc>)
 8001978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_RCC_ClockConfig+0x1d0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f99c 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40022000 	.word	0x40022000
 8001994:	40021000 	.word	0x40021000
 8001998:	08002584 	.word	0x08002584
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	20000010 	.word	0x20000010

080019a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019be:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d002      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x30>
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d003      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x36>
 80019d2:	e027      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80019d6:	613b      	str	r3, [r7, #16]
      break;
 80019d8:	e027      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	0c9b      	lsrs	r3, r3, #18
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	4a17      	ldr	r2, [pc, #92]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e4:	5cd3      	ldrb	r3, [r2, r3]
 80019e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	0c5b      	lsrs	r3, r3, #17
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	4a11      	ldr	r2, [pc, #68]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a06:	fb03 f202 	mul.w	r2, r3, r2
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e004      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a0c      	ldr	r2, [pc, #48]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	613b      	str	r3, [r7, #16]
      break;
 8001a22:	e002      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a26:	613b      	str	r3, [r7, #16]
      break;
 8001a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2a:	693b      	ldr	r3, [r7, #16]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	007a1200 	.word	0x007a1200
 8001a40:	08002594 	.word	0x08002594
 8001a44:	080025a4 	.word	0x080025a4
 8001a48:	003d0900 	.word	0x003d0900

08001a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <RCC_Delay+0x34>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <RCC_Delay+0x38>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0a5b      	lsrs	r3, r3, #9
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a68:	bf00      	nop
  }
  while (Delay --);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	60fa      	str	r2, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f9      	bne.n	8001a68 <RCC_Delay+0x1c>
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	2000000c 	.word	0x2000000c
 8001a84:	10624dd3 	.word	0x10624dd3

08001a88 <sniprintf>:
 8001a88:	b40c      	push	{r2, r3}
 8001a8a:	b530      	push	{r4, r5, lr}
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <sniprintf+0x64>)
 8001a8e:	1e0c      	subs	r4, r1, #0
 8001a90:	681d      	ldr	r5, [r3, #0]
 8001a92:	b09d      	sub	sp, #116	@ 0x74
 8001a94:	da08      	bge.n	8001aa8 <sniprintf+0x20>
 8001a96:	238b      	movs	r3, #139	@ 0x8b
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	602b      	str	r3, [r5, #0]
 8001a9e:	b01d      	add	sp, #116	@ 0x74
 8001aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001aa4:	b002      	add	sp, #8
 8001aa6:	4770      	bx	lr
 8001aa8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001aac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001ab0:	bf0c      	ite	eq
 8001ab2:	4623      	moveq	r3, r4
 8001ab4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001ab8:	9304      	str	r3, [sp, #16]
 8001aba:	9307      	str	r3, [sp, #28]
 8001abc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ac0:	9002      	str	r0, [sp, #8]
 8001ac2:	9006      	str	r0, [sp, #24]
 8001ac4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001ac8:	4628      	mov	r0, r5
 8001aca:	ab21      	add	r3, sp, #132	@ 0x84
 8001acc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8001ace:	a902      	add	r1, sp, #8
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	f000 f993 	bl	8001dfc <_svfiprintf_r>
 8001ad6:	1c43      	adds	r3, r0, #1
 8001ad8:	bfbc      	itt	lt
 8001ada:	238b      	movlt	r3, #139	@ 0x8b
 8001adc:	602b      	strlt	r3, [r5, #0]
 8001ade:	2c00      	cmp	r4, #0
 8001ae0:	d0dd      	beq.n	8001a9e <sniprintf+0x16>
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	9b02      	ldr	r3, [sp, #8]
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e7d9      	b.n	8001a9e <sniprintf+0x16>
 8001aea:	bf00      	nop
 8001aec:	20000018 	.word	0x20000018

08001af0 <memset>:
 8001af0:	4603      	mov	r3, r0
 8001af2:	4402      	add	r2, r0
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d100      	bne.n	8001afa <memset+0xa>
 8001af8:	4770      	bx	lr
 8001afa:	f803 1b01 	strb.w	r1, [r3], #1
 8001afe:	e7f9      	b.n	8001af4 <memset+0x4>

08001b00 <__errno>:
 8001b00:	4b01      	ldr	r3, [pc, #4]	@ (8001b08 <__errno+0x8>)
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000018 	.word	0x20000018

08001b0c <__libc_init_array>:
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	2600      	movs	r6, #0
 8001b10:	4d0c      	ldr	r5, [pc, #48]	@ (8001b44 <__libc_init_array+0x38>)
 8001b12:	4c0d      	ldr	r4, [pc, #52]	@ (8001b48 <__libc_init_array+0x3c>)
 8001b14:	1b64      	subs	r4, r4, r5
 8001b16:	10a4      	asrs	r4, r4, #2
 8001b18:	42a6      	cmp	r6, r4
 8001b1a:	d109      	bne.n	8001b30 <__libc_init_array+0x24>
 8001b1c:	f000 fc78 	bl	8002410 <_init>
 8001b20:	2600      	movs	r6, #0
 8001b22:	4d0a      	ldr	r5, [pc, #40]	@ (8001b4c <__libc_init_array+0x40>)
 8001b24:	4c0a      	ldr	r4, [pc, #40]	@ (8001b50 <__libc_init_array+0x44>)
 8001b26:	1b64      	subs	r4, r4, r5
 8001b28:	10a4      	asrs	r4, r4, #2
 8001b2a:	42a6      	cmp	r6, r4
 8001b2c:	d105      	bne.n	8001b3a <__libc_init_array+0x2e>
 8001b2e:	bd70      	pop	{r4, r5, r6, pc}
 8001b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b34:	4798      	blx	r3
 8001b36:	3601      	adds	r6, #1
 8001b38:	e7ee      	b.n	8001b18 <__libc_init_array+0xc>
 8001b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b3e:	4798      	blx	r3
 8001b40:	3601      	adds	r6, #1
 8001b42:	e7f2      	b.n	8001b2a <__libc_init_array+0x1e>
 8001b44:	080025e4 	.word	0x080025e4
 8001b48:	080025e4 	.word	0x080025e4
 8001b4c:	080025e4 	.word	0x080025e4
 8001b50:	080025e8 	.word	0x080025e8

08001b54 <__retarget_lock_acquire_recursive>:
 8001b54:	4770      	bx	lr

08001b56 <__retarget_lock_release_recursive>:
 8001b56:	4770      	bx	lr

08001b58 <_free_r>:
 8001b58:	b538      	push	{r3, r4, r5, lr}
 8001b5a:	4605      	mov	r5, r0
 8001b5c:	2900      	cmp	r1, #0
 8001b5e:	d040      	beq.n	8001be2 <_free_r+0x8a>
 8001b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b64:	1f0c      	subs	r4, r1, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bfb8      	it	lt
 8001b6a:	18e4      	addlt	r4, r4, r3
 8001b6c:	f000 f8de 	bl	8001d2c <__malloc_lock>
 8001b70:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <_free_r+0x8c>)
 8001b72:	6813      	ldr	r3, [r2, #0]
 8001b74:	b933      	cbnz	r3, 8001b84 <_free_r+0x2c>
 8001b76:	6063      	str	r3, [r4, #4]
 8001b78:	6014      	str	r4, [r2, #0]
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b80:	f000 b8da 	b.w	8001d38 <__malloc_unlock>
 8001b84:	42a3      	cmp	r3, r4
 8001b86:	d908      	bls.n	8001b9a <_free_r+0x42>
 8001b88:	6820      	ldr	r0, [r4, #0]
 8001b8a:	1821      	adds	r1, r4, r0
 8001b8c:	428b      	cmp	r3, r1
 8001b8e:	bf01      	itttt	eq
 8001b90:	6819      	ldreq	r1, [r3, #0]
 8001b92:	685b      	ldreq	r3, [r3, #4]
 8001b94:	1809      	addeq	r1, r1, r0
 8001b96:	6021      	streq	r1, [r4, #0]
 8001b98:	e7ed      	b.n	8001b76 <_free_r+0x1e>
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	b10b      	cbz	r3, 8001ba4 <_free_r+0x4c>
 8001ba0:	42a3      	cmp	r3, r4
 8001ba2:	d9fa      	bls.n	8001b9a <_free_r+0x42>
 8001ba4:	6811      	ldr	r1, [r2, #0]
 8001ba6:	1850      	adds	r0, r2, r1
 8001ba8:	42a0      	cmp	r0, r4
 8001baa:	d10b      	bne.n	8001bc4 <_free_r+0x6c>
 8001bac:	6820      	ldr	r0, [r4, #0]
 8001bae:	4401      	add	r1, r0
 8001bb0:	1850      	adds	r0, r2, r1
 8001bb2:	4283      	cmp	r3, r0
 8001bb4:	6011      	str	r1, [r2, #0]
 8001bb6:	d1e0      	bne.n	8001b7a <_free_r+0x22>
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4408      	add	r0, r1
 8001bbe:	6010      	str	r0, [r2, #0]
 8001bc0:	6053      	str	r3, [r2, #4]
 8001bc2:	e7da      	b.n	8001b7a <_free_r+0x22>
 8001bc4:	d902      	bls.n	8001bcc <_free_r+0x74>
 8001bc6:	230c      	movs	r3, #12
 8001bc8:	602b      	str	r3, [r5, #0]
 8001bca:	e7d6      	b.n	8001b7a <_free_r+0x22>
 8001bcc:	6820      	ldr	r0, [r4, #0]
 8001bce:	1821      	adds	r1, r4, r0
 8001bd0:	428b      	cmp	r3, r1
 8001bd2:	bf01      	itttt	eq
 8001bd4:	6819      	ldreq	r1, [r3, #0]
 8001bd6:	685b      	ldreq	r3, [r3, #4]
 8001bd8:	1809      	addeq	r1, r1, r0
 8001bda:	6021      	streq	r1, [r4, #0]
 8001bdc:	6063      	str	r3, [r4, #4]
 8001bde:	6054      	str	r4, [r2, #4]
 8001be0:	e7cb      	b.n	8001b7a <_free_r+0x22>
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
 8001be4:	200001dc 	.word	0x200001dc

08001be8 <sbrk_aligned>:
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	4e0f      	ldr	r6, [pc, #60]	@ (8001c28 <sbrk_aligned+0x40>)
 8001bec:	460c      	mov	r4, r1
 8001bee:	6831      	ldr	r1, [r6, #0]
 8001bf0:	4605      	mov	r5, r0
 8001bf2:	b911      	cbnz	r1, 8001bfa <sbrk_aligned+0x12>
 8001bf4:	f000 fbaa 	bl	800234c <_sbrk_r>
 8001bf8:	6030      	str	r0, [r6, #0]
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	f000 fba5 	bl	800234c <_sbrk_r>
 8001c02:	1c43      	adds	r3, r0, #1
 8001c04:	d103      	bne.n	8001c0e <sbrk_aligned+0x26>
 8001c06:	f04f 34ff 	mov.w	r4, #4294967295
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	bd70      	pop	{r4, r5, r6, pc}
 8001c0e:	1cc4      	adds	r4, r0, #3
 8001c10:	f024 0403 	bic.w	r4, r4, #3
 8001c14:	42a0      	cmp	r0, r4
 8001c16:	d0f8      	beq.n	8001c0a <sbrk_aligned+0x22>
 8001c18:	1a21      	subs	r1, r4, r0
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	f000 fb96 	bl	800234c <_sbrk_r>
 8001c20:	3001      	adds	r0, #1
 8001c22:	d1f2      	bne.n	8001c0a <sbrk_aligned+0x22>
 8001c24:	e7ef      	b.n	8001c06 <sbrk_aligned+0x1e>
 8001c26:	bf00      	nop
 8001c28:	200001d8 	.word	0x200001d8

08001c2c <_malloc_r>:
 8001c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c30:	1ccd      	adds	r5, r1, #3
 8001c32:	f025 0503 	bic.w	r5, r5, #3
 8001c36:	3508      	adds	r5, #8
 8001c38:	2d0c      	cmp	r5, #12
 8001c3a:	bf38      	it	cc
 8001c3c:	250c      	movcc	r5, #12
 8001c3e:	2d00      	cmp	r5, #0
 8001c40:	4606      	mov	r6, r0
 8001c42:	db01      	blt.n	8001c48 <_malloc_r+0x1c>
 8001c44:	42a9      	cmp	r1, r5
 8001c46:	d904      	bls.n	8001c52 <_malloc_r+0x26>
 8001c48:	230c      	movs	r3, #12
 8001c4a:	6033      	str	r3, [r6, #0]
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d28 <_malloc_r+0xfc>
 8001c56:	f000 f869 	bl	8001d2c <__malloc_lock>
 8001c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8001c5e:	461c      	mov	r4, r3
 8001c60:	bb44      	cbnz	r4, 8001cb4 <_malloc_r+0x88>
 8001c62:	4629      	mov	r1, r5
 8001c64:	4630      	mov	r0, r6
 8001c66:	f7ff ffbf 	bl	8001be8 <sbrk_aligned>
 8001c6a:	1c43      	adds	r3, r0, #1
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	d158      	bne.n	8001d22 <_malloc_r+0xf6>
 8001c70:	f8d8 4000 	ldr.w	r4, [r8]
 8001c74:	4627      	mov	r7, r4
 8001c76:	2f00      	cmp	r7, #0
 8001c78:	d143      	bne.n	8001d02 <_malloc_r+0xd6>
 8001c7a:	2c00      	cmp	r4, #0
 8001c7c:	d04b      	beq.n	8001d16 <_malloc_r+0xea>
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	4639      	mov	r1, r7
 8001c82:	4630      	mov	r0, r6
 8001c84:	eb04 0903 	add.w	r9, r4, r3
 8001c88:	f000 fb60 	bl	800234c <_sbrk_r>
 8001c8c:	4581      	cmp	r9, r0
 8001c8e:	d142      	bne.n	8001d16 <_malloc_r+0xea>
 8001c90:	6821      	ldr	r1, [r4, #0]
 8001c92:	4630      	mov	r0, r6
 8001c94:	1a6d      	subs	r5, r5, r1
 8001c96:	4629      	mov	r1, r5
 8001c98:	f7ff ffa6 	bl	8001be8 <sbrk_aligned>
 8001c9c:	3001      	adds	r0, #1
 8001c9e:	d03a      	beq.n	8001d16 <_malloc_r+0xea>
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	442b      	add	r3, r5
 8001ca4:	6023      	str	r3, [r4, #0]
 8001ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	bb62      	cbnz	r2, 8001d08 <_malloc_r+0xdc>
 8001cae:	f8c8 7000 	str.w	r7, [r8]
 8001cb2:	e00f      	b.n	8001cd4 <_malloc_r+0xa8>
 8001cb4:	6822      	ldr	r2, [r4, #0]
 8001cb6:	1b52      	subs	r2, r2, r5
 8001cb8:	d420      	bmi.n	8001cfc <_malloc_r+0xd0>
 8001cba:	2a0b      	cmp	r2, #11
 8001cbc:	d917      	bls.n	8001cee <_malloc_r+0xc2>
 8001cbe:	1961      	adds	r1, r4, r5
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	6025      	str	r5, [r4, #0]
 8001cc4:	bf18      	it	ne
 8001cc6:	6059      	strne	r1, [r3, #4]
 8001cc8:	6863      	ldr	r3, [r4, #4]
 8001cca:	bf08      	it	eq
 8001ccc:	f8c8 1000 	streq.w	r1, [r8]
 8001cd0:	5162      	str	r2, [r4, r5]
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	f000 f82f 	bl	8001d38 <__malloc_unlock>
 8001cda:	f104 000b 	add.w	r0, r4, #11
 8001cde:	1d23      	adds	r3, r4, #4
 8001ce0:	f020 0007 	bic.w	r0, r0, #7
 8001ce4:	1ac2      	subs	r2, r0, r3
 8001ce6:	bf1c      	itt	ne
 8001ce8:	1a1b      	subne	r3, r3, r0
 8001cea:	50a3      	strne	r3, [r4, r2]
 8001cec:	e7af      	b.n	8001c4e <_malloc_r+0x22>
 8001cee:	6862      	ldr	r2, [r4, #4]
 8001cf0:	42a3      	cmp	r3, r4
 8001cf2:	bf0c      	ite	eq
 8001cf4:	f8c8 2000 	streq.w	r2, [r8]
 8001cf8:	605a      	strne	r2, [r3, #4]
 8001cfa:	e7eb      	b.n	8001cd4 <_malloc_r+0xa8>
 8001cfc:	4623      	mov	r3, r4
 8001cfe:	6864      	ldr	r4, [r4, #4]
 8001d00:	e7ae      	b.n	8001c60 <_malloc_r+0x34>
 8001d02:	463c      	mov	r4, r7
 8001d04:	687f      	ldr	r7, [r7, #4]
 8001d06:	e7b6      	b.n	8001c76 <_malloc_r+0x4a>
 8001d08:	461a      	mov	r2, r3
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	42a3      	cmp	r3, r4
 8001d0e:	d1fb      	bne.n	8001d08 <_malloc_r+0xdc>
 8001d10:	2300      	movs	r3, #0
 8001d12:	6053      	str	r3, [r2, #4]
 8001d14:	e7de      	b.n	8001cd4 <_malloc_r+0xa8>
 8001d16:	230c      	movs	r3, #12
 8001d18:	4630      	mov	r0, r6
 8001d1a:	6033      	str	r3, [r6, #0]
 8001d1c:	f000 f80c 	bl	8001d38 <__malloc_unlock>
 8001d20:	e794      	b.n	8001c4c <_malloc_r+0x20>
 8001d22:	6005      	str	r5, [r0, #0]
 8001d24:	e7d6      	b.n	8001cd4 <_malloc_r+0xa8>
 8001d26:	bf00      	nop
 8001d28:	200001dc 	.word	0x200001dc

08001d2c <__malloc_lock>:
 8001d2c:	4801      	ldr	r0, [pc, #4]	@ (8001d34 <__malloc_lock+0x8>)
 8001d2e:	f7ff bf11 	b.w	8001b54 <__retarget_lock_acquire_recursive>
 8001d32:	bf00      	nop
 8001d34:	200001d4 	.word	0x200001d4

08001d38 <__malloc_unlock>:
 8001d38:	4801      	ldr	r0, [pc, #4]	@ (8001d40 <__malloc_unlock+0x8>)
 8001d3a:	f7ff bf0c 	b.w	8001b56 <__retarget_lock_release_recursive>
 8001d3e:	bf00      	nop
 8001d40:	200001d4 	.word	0x200001d4

08001d44 <__ssputs_r>:
 8001d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d48:	461f      	mov	r7, r3
 8001d4a:	688e      	ldr	r6, [r1, #8]
 8001d4c:	4682      	mov	sl, r0
 8001d4e:	42be      	cmp	r6, r7
 8001d50:	460c      	mov	r4, r1
 8001d52:	4690      	mov	r8, r2
 8001d54:	680b      	ldr	r3, [r1, #0]
 8001d56:	d82d      	bhi.n	8001db4 <__ssputs_r+0x70>
 8001d58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001d60:	d026      	beq.n	8001db0 <__ssputs_r+0x6c>
 8001d62:	6965      	ldr	r5, [r4, #20]
 8001d64:	6909      	ldr	r1, [r1, #16]
 8001d66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001d6a:	eba3 0901 	sub.w	r9, r3, r1
 8001d6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001d72:	1c7b      	adds	r3, r7, #1
 8001d74:	444b      	add	r3, r9
 8001d76:	106d      	asrs	r5, r5, #1
 8001d78:	429d      	cmp	r5, r3
 8001d7a:	bf38      	it	cc
 8001d7c:	461d      	movcc	r5, r3
 8001d7e:	0553      	lsls	r3, r2, #21
 8001d80:	d527      	bpl.n	8001dd2 <__ssputs_r+0x8e>
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7ff ff52 	bl	8001c2c <_malloc_r>
 8001d88:	4606      	mov	r6, r0
 8001d8a:	b360      	cbz	r0, 8001de6 <__ssputs_r+0xa2>
 8001d8c:	464a      	mov	r2, r9
 8001d8e:	6921      	ldr	r1, [r4, #16]
 8001d90:	f000 fafa 	bl	8002388 <memcpy>
 8001d94:	89a3      	ldrh	r3, [r4, #12]
 8001d96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d9e:	81a3      	strh	r3, [r4, #12]
 8001da0:	6126      	str	r6, [r4, #16]
 8001da2:	444e      	add	r6, r9
 8001da4:	6026      	str	r6, [r4, #0]
 8001da6:	463e      	mov	r6, r7
 8001da8:	6165      	str	r5, [r4, #20]
 8001daa:	eba5 0509 	sub.w	r5, r5, r9
 8001dae:	60a5      	str	r5, [r4, #8]
 8001db0:	42be      	cmp	r6, r7
 8001db2:	d900      	bls.n	8001db6 <__ssputs_r+0x72>
 8001db4:	463e      	mov	r6, r7
 8001db6:	4632      	mov	r2, r6
 8001db8:	4641      	mov	r1, r8
 8001dba:	6820      	ldr	r0, [r4, #0]
 8001dbc:	f000 faac 	bl	8002318 <memmove>
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	68a3      	ldr	r3, [r4, #8]
 8001dc4:	1b9b      	subs	r3, r3, r6
 8001dc6:	60a3      	str	r3, [r4, #8]
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	4433      	add	r3, r6
 8001dcc:	6023      	str	r3, [r4, #0]
 8001dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dd2:	462a      	mov	r2, r5
 8001dd4:	f000 fae6 	bl	80023a4 <_realloc_r>
 8001dd8:	4606      	mov	r6, r0
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d1e0      	bne.n	8001da0 <__ssputs_r+0x5c>
 8001dde:	4650      	mov	r0, sl
 8001de0:	6921      	ldr	r1, [r4, #16]
 8001de2:	f7ff feb9 	bl	8001b58 <_free_r>
 8001de6:	230c      	movs	r3, #12
 8001de8:	f8ca 3000 	str.w	r3, [sl]
 8001dec:	89a3      	ldrh	r3, [r4, #12]
 8001dee:	f04f 30ff 	mov.w	r0, #4294967295
 8001df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001df6:	81a3      	strh	r3, [r4, #12]
 8001df8:	e7e9      	b.n	8001dce <__ssputs_r+0x8a>
	...

08001dfc <_svfiprintf_r>:
 8001dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e00:	4698      	mov	r8, r3
 8001e02:	898b      	ldrh	r3, [r1, #12]
 8001e04:	4607      	mov	r7, r0
 8001e06:	061b      	lsls	r3, r3, #24
 8001e08:	460d      	mov	r5, r1
 8001e0a:	4614      	mov	r4, r2
 8001e0c:	b09d      	sub	sp, #116	@ 0x74
 8001e0e:	d510      	bpl.n	8001e32 <_svfiprintf_r+0x36>
 8001e10:	690b      	ldr	r3, [r1, #16]
 8001e12:	b973      	cbnz	r3, 8001e32 <_svfiprintf_r+0x36>
 8001e14:	2140      	movs	r1, #64	@ 0x40
 8001e16:	f7ff ff09 	bl	8001c2c <_malloc_r>
 8001e1a:	6028      	str	r0, [r5, #0]
 8001e1c:	6128      	str	r0, [r5, #16]
 8001e1e:	b930      	cbnz	r0, 8001e2e <_svfiprintf_r+0x32>
 8001e20:	230c      	movs	r3, #12
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	b01d      	add	sp, #116	@ 0x74
 8001e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e2e:	2340      	movs	r3, #64	@ 0x40
 8001e30:	616b      	str	r3, [r5, #20]
 8001e32:	2300      	movs	r3, #0
 8001e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e36:	2320      	movs	r3, #32
 8001e38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001e3c:	2330      	movs	r3, #48	@ 0x30
 8001e3e:	f04f 0901 	mov.w	r9, #1
 8001e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e46:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001fe0 <_svfiprintf_r+0x1e4>
 8001e4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001e4e:	4623      	mov	r3, r4
 8001e50:	469a      	mov	sl, r3
 8001e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e56:	b10a      	cbz	r2, 8001e5c <_svfiprintf_r+0x60>
 8001e58:	2a25      	cmp	r2, #37	@ 0x25
 8001e5a:	d1f9      	bne.n	8001e50 <_svfiprintf_r+0x54>
 8001e5c:	ebba 0b04 	subs.w	fp, sl, r4
 8001e60:	d00b      	beq.n	8001e7a <_svfiprintf_r+0x7e>
 8001e62:	465b      	mov	r3, fp
 8001e64:	4622      	mov	r2, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	4638      	mov	r0, r7
 8001e6a:	f7ff ff6b 	bl	8001d44 <__ssputs_r>
 8001e6e:	3001      	adds	r0, #1
 8001e70:	f000 80a7 	beq.w	8001fc2 <_svfiprintf_r+0x1c6>
 8001e74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001e76:	445a      	add	r2, fp
 8001e78:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 809f 	beq.w	8001fc2 <_svfiprintf_r+0x1c6>
 8001e84:	2300      	movs	r3, #0
 8001e86:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e8e:	f10a 0a01 	add.w	sl, sl, #1
 8001e92:	9304      	str	r3, [sp, #16]
 8001e94:	9307      	str	r3, [sp, #28]
 8001e96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001e9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001e9c:	4654      	mov	r4, sl
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ea4:	484e      	ldr	r0, [pc, #312]	@ (8001fe0 <_svfiprintf_r+0x1e4>)
 8001ea6:	f000 fa61 	bl	800236c <memchr>
 8001eaa:	9a04      	ldr	r2, [sp, #16]
 8001eac:	b9d8      	cbnz	r0, 8001ee6 <_svfiprintf_r+0xea>
 8001eae:	06d0      	lsls	r0, r2, #27
 8001eb0:	bf44      	itt	mi
 8001eb2:	2320      	movmi	r3, #32
 8001eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001eb8:	0711      	lsls	r1, r2, #28
 8001eba:	bf44      	itt	mi
 8001ebc:	232b      	movmi	r3, #43	@ 0x2b
 8001ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8001ec6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ec8:	d015      	beq.n	8001ef6 <_svfiprintf_r+0xfa>
 8001eca:	4654      	mov	r4, sl
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f04f 0c0a 	mov.w	ip, #10
 8001ed2:	9a07      	ldr	r2, [sp, #28]
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001eda:	3b30      	subs	r3, #48	@ 0x30
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d94b      	bls.n	8001f78 <_svfiprintf_r+0x17c>
 8001ee0:	b1b0      	cbz	r0, 8001f10 <_svfiprintf_r+0x114>
 8001ee2:	9207      	str	r2, [sp, #28]
 8001ee4:	e014      	b.n	8001f10 <_svfiprintf_r+0x114>
 8001ee6:	eba0 0308 	sub.w	r3, r0, r8
 8001eea:	fa09 f303 	lsl.w	r3, r9, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	46a2      	mov	sl, r4
 8001ef2:	9304      	str	r3, [sp, #16]
 8001ef4:	e7d2      	b.n	8001e9c <_svfiprintf_r+0xa0>
 8001ef6:	9b03      	ldr	r3, [sp, #12]
 8001ef8:	1d19      	adds	r1, r3, #4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	9103      	str	r1, [sp, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bfbb      	ittet	lt
 8001f02:	425b      	neglt	r3, r3
 8001f04:	f042 0202 	orrlt.w	r2, r2, #2
 8001f08:	9307      	strge	r3, [sp, #28]
 8001f0a:	9307      	strlt	r3, [sp, #28]
 8001f0c:	bfb8      	it	lt
 8001f0e:	9204      	strlt	r2, [sp, #16]
 8001f10:	7823      	ldrb	r3, [r4, #0]
 8001f12:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f14:	d10a      	bne.n	8001f2c <_svfiprintf_r+0x130>
 8001f16:	7863      	ldrb	r3, [r4, #1]
 8001f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f1a:	d132      	bne.n	8001f82 <_svfiprintf_r+0x186>
 8001f1c:	9b03      	ldr	r3, [sp, #12]
 8001f1e:	3402      	adds	r4, #2
 8001f20:	1d1a      	adds	r2, r3, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	9203      	str	r2, [sp, #12]
 8001f26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f2a:	9305      	str	r3, [sp, #20]
 8001f2c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001fe4 <_svfiprintf_r+0x1e8>
 8001f30:	2203      	movs	r2, #3
 8001f32:	4650      	mov	r0, sl
 8001f34:	7821      	ldrb	r1, [r4, #0]
 8001f36:	f000 fa19 	bl	800236c <memchr>
 8001f3a:	b138      	cbz	r0, 8001f4c <_svfiprintf_r+0x150>
 8001f3c:	2240      	movs	r2, #64	@ 0x40
 8001f3e:	9b04      	ldr	r3, [sp, #16]
 8001f40:	eba0 000a 	sub.w	r0, r0, sl
 8001f44:	4082      	lsls	r2, r0
 8001f46:	4313      	orrs	r3, r2
 8001f48:	3401      	adds	r4, #1
 8001f4a:	9304      	str	r3, [sp, #16]
 8001f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f50:	2206      	movs	r2, #6
 8001f52:	4825      	ldr	r0, [pc, #148]	@ (8001fe8 <_svfiprintf_r+0x1ec>)
 8001f54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001f58:	f000 fa08 	bl	800236c <memchr>
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d036      	beq.n	8001fce <_svfiprintf_r+0x1d2>
 8001f60:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <_svfiprintf_r+0x1f0>)
 8001f62:	bb1b      	cbnz	r3, 8001fac <_svfiprintf_r+0x1b0>
 8001f64:	9b03      	ldr	r3, [sp, #12]
 8001f66:	3307      	adds	r3, #7
 8001f68:	f023 0307 	bic.w	r3, r3, #7
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	9303      	str	r3, [sp, #12]
 8001f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f72:	4433      	add	r3, r6
 8001f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f76:	e76a      	b.n	8001e4e <_svfiprintf_r+0x52>
 8001f78:	460c      	mov	r4, r1
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f80:	e7a8      	b.n	8001ed4 <_svfiprintf_r+0xd8>
 8001f82:	2300      	movs	r3, #0
 8001f84:	f04f 0c0a 	mov.w	ip, #10
 8001f88:	4619      	mov	r1, r3
 8001f8a:	3401      	adds	r4, #1
 8001f8c:	9305      	str	r3, [sp, #20]
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f94:	3a30      	subs	r2, #48	@ 0x30
 8001f96:	2a09      	cmp	r2, #9
 8001f98:	d903      	bls.n	8001fa2 <_svfiprintf_r+0x1a6>
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0c6      	beq.n	8001f2c <_svfiprintf_r+0x130>
 8001f9e:	9105      	str	r1, [sp, #20]
 8001fa0:	e7c4      	b.n	8001f2c <_svfiprintf_r+0x130>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8001faa:	e7f0      	b.n	8001f8e <_svfiprintf_r+0x192>
 8001fac:	ab03      	add	r3, sp, #12
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	462a      	mov	r2, r5
 8001fb2:	4638      	mov	r0, r7
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <_svfiprintf_r+0x1f4>)
 8001fb6:	a904      	add	r1, sp, #16
 8001fb8:	f3af 8000 	nop.w
 8001fbc:	1c42      	adds	r2, r0, #1
 8001fbe:	4606      	mov	r6, r0
 8001fc0:	d1d6      	bne.n	8001f70 <_svfiprintf_r+0x174>
 8001fc2:	89ab      	ldrh	r3, [r5, #12]
 8001fc4:	065b      	lsls	r3, r3, #25
 8001fc6:	f53f af2d 	bmi.w	8001e24 <_svfiprintf_r+0x28>
 8001fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001fcc:	e72c      	b.n	8001e28 <_svfiprintf_r+0x2c>
 8001fce:	ab03      	add	r3, sp, #12
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	462a      	mov	r2, r5
 8001fd4:	4638      	mov	r0, r7
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <_svfiprintf_r+0x1f4>)
 8001fd8:	a904      	add	r1, sp, #16
 8001fda:	f000 f87d 	bl	80020d8 <_printf_i>
 8001fde:	e7ed      	b.n	8001fbc <_svfiprintf_r+0x1c0>
 8001fe0:	080025a6 	.word	0x080025a6
 8001fe4:	080025ac 	.word	0x080025ac
 8001fe8:	080025b0 	.word	0x080025b0
 8001fec:	00000000 	.word	0x00000000
 8001ff0:	08001d45 	.word	0x08001d45

08001ff4 <_printf_common>:
 8001ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff8:	4616      	mov	r6, r2
 8001ffa:	4698      	mov	r8, r3
 8001ffc:	688a      	ldr	r2, [r1, #8]
 8001ffe:	690b      	ldr	r3, [r1, #16]
 8002000:	4607      	mov	r7, r0
 8002002:	4293      	cmp	r3, r2
 8002004:	bfb8      	it	lt
 8002006:	4613      	movlt	r3, r2
 8002008:	6033      	str	r3, [r6, #0]
 800200a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800200e:	460c      	mov	r4, r1
 8002010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002014:	b10a      	cbz	r2, 800201a <_printf_common+0x26>
 8002016:	3301      	adds	r3, #1
 8002018:	6033      	str	r3, [r6, #0]
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	0699      	lsls	r1, r3, #26
 800201e:	bf42      	ittt	mi
 8002020:	6833      	ldrmi	r3, [r6, #0]
 8002022:	3302      	addmi	r3, #2
 8002024:	6033      	strmi	r3, [r6, #0]
 8002026:	6825      	ldr	r5, [r4, #0]
 8002028:	f015 0506 	ands.w	r5, r5, #6
 800202c:	d106      	bne.n	800203c <_printf_common+0x48>
 800202e:	f104 0a19 	add.w	sl, r4, #25
 8002032:	68e3      	ldr	r3, [r4, #12]
 8002034:	6832      	ldr	r2, [r6, #0]
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	42ab      	cmp	r3, r5
 800203a:	dc2b      	bgt.n	8002094 <_printf_common+0xa0>
 800203c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002040:	6822      	ldr	r2, [r4, #0]
 8002042:	3b00      	subs	r3, #0
 8002044:	bf18      	it	ne
 8002046:	2301      	movne	r3, #1
 8002048:	0692      	lsls	r2, r2, #26
 800204a:	d430      	bmi.n	80020ae <_printf_common+0xba>
 800204c:	4641      	mov	r1, r8
 800204e:	4638      	mov	r0, r7
 8002050:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002054:	47c8      	blx	r9
 8002056:	3001      	adds	r0, #1
 8002058:	d023      	beq.n	80020a2 <_printf_common+0xae>
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	6922      	ldr	r2, [r4, #16]
 800205e:	f003 0306 	and.w	r3, r3, #6
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf14      	ite	ne
 8002066:	2500      	movne	r5, #0
 8002068:	6833      	ldreq	r3, [r6, #0]
 800206a:	f04f 0600 	mov.w	r6, #0
 800206e:	bf08      	it	eq
 8002070:	68e5      	ldreq	r5, [r4, #12]
 8002072:	f104 041a 	add.w	r4, r4, #26
 8002076:	bf08      	it	eq
 8002078:	1aed      	subeq	r5, r5, r3
 800207a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800207e:	bf08      	it	eq
 8002080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002084:	4293      	cmp	r3, r2
 8002086:	bfc4      	itt	gt
 8002088:	1a9b      	subgt	r3, r3, r2
 800208a:	18ed      	addgt	r5, r5, r3
 800208c:	42b5      	cmp	r5, r6
 800208e:	d11a      	bne.n	80020c6 <_printf_common+0xd2>
 8002090:	2000      	movs	r0, #0
 8002092:	e008      	b.n	80020a6 <_printf_common+0xb2>
 8002094:	2301      	movs	r3, #1
 8002096:	4652      	mov	r2, sl
 8002098:	4641      	mov	r1, r8
 800209a:	4638      	mov	r0, r7
 800209c:	47c8      	blx	r9
 800209e:	3001      	adds	r0, #1
 80020a0:	d103      	bne.n	80020aa <_printf_common+0xb6>
 80020a2:	f04f 30ff 	mov.w	r0, #4294967295
 80020a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020aa:	3501      	adds	r5, #1
 80020ac:	e7c1      	b.n	8002032 <_printf_common+0x3e>
 80020ae:	2030      	movs	r0, #48	@ 0x30
 80020b0:	18e1      	adds	r1, r4, r3
 80020b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80020bc:	4422      	add	r2, r4
 80020be:	3302      	adds	r3, #2
 80020c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80020c4:	e7c2      	b.n	800204c <_printf_common+0x58>
 80020c6:	2301      	movs	r3, #1
 80020c8:	4622      	mov	r2, r4
 80020ca:	4641      	mov	r1, r8
 80020cc:	4638      	mov	r0, r7
 80020ce:	47c8      	blx	r9
 80020d0:	3001      	adds	r0, #1
 80020d2:	d0e6      	beq.n	80020a2 <_printf_common+0xae>
 80020d4:	3601      	adds	r6, #1
 80020d6:	e7d9      	b.n	800208c <_printf_common+0x98>

080020d8 <_printf_i>:
 80020d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020dc:	7e0f      	ldrb	r7, [r1, #24]
 80020de:	4691      	mov	r9, r2
 80020e0:	2f78      	cmp	r7, #120	@ 0x78
 80020e2:	4680      	mov	r8, r0
 80020e4:	460c      	mov	r4, r1
 80020e6:	469a      	mov	sl, r3
 80020e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80020ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80020ee:	d807      	bhi.n	8002100 <_printf_i+0x28>
 80020f0:	2f62      	cmp	r7, #98	@ 0x62
 80020f2:	d80a      	bhi.n	800210a <_printf_i+0x32>
 80020f4:	2f00      	cmp	r7, #0
 80020f6:	f000 80d3 	beq.w	80022a0 <_printf_i+0x1c8>
 80020fa:	2f58      	cmp	r7, #88	@ 0x58
 80020fc:	f000 80ba 	beq.w	8002274 <_printf_i+0x19c>
 8002100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002108:	e03a      	b.n	8002180 <_printf_i+0xa8>
 800210a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800210e:	2b15      	cmp	r3, #21
 8002110:	d8f6      	bhi.n	8002100 <_printf_i+0x28>
 8002112:	a101      	add	r1, pc, #4	@ (adr r1, 8002118 <_printf_i+0x40>)
 8002114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002118:	08002171 	.word	0x08002171
 800211c:	08002185 	.word	0x08002185
 8002120:	08002101 	.word	0x08002101
 8002124:	08002101 	.word	0x08002101
 8002128:	08002101 	.word	0x08002101
 800212c:	08002101 	.word	0x08002101
 8002130:	08002185 	.word	0x08002185
 8002134:	08002101 	.word	0x08002101
 8002138:	08002101 	.word	0x08002101
 800213c:	08002101 	.word	0x08002101
 8002140:	08002101 	.word	0x08002101
 8002144:	08002287 	.word	0x08002287
 8002148:	080021af 	.word	0x080021af
 800214c:	08002241 	.word	0x08002241
 8002150:	08002101 	.word	0x08002101
 8002154:	08002101 	.word	0x08002101
 8002158:	080022a9 	.word	0x080022a9
 800215c:	08002101 	.word	0x08002101
 8002160:	080021af 	.word	0x080021af
 8002164:	08002101 	.word	0x08002101
 8002168:	08002101 	.word	0x08002101
 800216c:	08002249 	.word	0x08002249
 8002170:	6833      	ldr	r3, [r6, #0]
 8002172:	1d1a      	adds	r2, r3, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6032      	str	r2, [r6, #0]
 8002178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800217c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002180:	2301      	movs	r3, #1
 8002182:	e09e      	b.n	80022c2 <_printf_i+0x1ea>
 8002184:	6833      	ldr	r3, [r6, #0]
 8002186:	6820      	ldr	r0, [r4, #0]
 8002188:	1d19      	adds	r1, r3, #4
 800218a:	6031      	str	r1, [r6, #0]
 800218c:	0606      	lsls	r6, r0, #24
 800218e:	d501      	bpl.n	8002194 <_printf_i+0xbc>
 8002190:	681d      	ldr	r5, [r3, #0]
 8002192:	e003      	b.n	800219c <_printf_i+0xc4>
 8002194:	0645      	lsls	r5, r0, #25
 8002196:	d5fb      	bpl.n	8002190 <_printf_i+0xb8>
 8002198:	f9b3 5000 	ldrsh.w	r5, [r3]
 800219c:	2d00      	cmp	r5, #0
 800219e:	da03      	bge.n	80021a8 <_printf_i+0xd0>
 80021a0:	232d      	movs	r3, #45	@ 0x2d
 80021a2:	426d      	negs	r5, r5
 80021a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021a8:	230a      	movs	r3, #10
 80021aa:	4859      	ldr	r0, [pc, #356]	@ (8002310 <_printf_i+0x238>)
 80021ac:	e011      	b.n	80021d2 <_printf_i+0xfa>
 80021ae:	6821      	ldr	r1, [r4, #0]
 80021b0:	6833      	ldr	r3, [r6, #0]
 80021b2:	0608      	lsls	r0, r1, #24
 80021b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80021b8:	d402      	bmi.n	80021c0 <_printf_i+0xe8>
 80021ba:	0649      	lsls	r1, r1, #25
 80021bc:	bf48      	it	mi
 80021be:	b2ad      	uxthmi	r5, r5
 80021c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80021c2:	6033      	str	r3, [r6, #0]
 80021c4:	bf14      	ite	ne
 80021c6:	230a      	movne	r3, #10
 80021c8:	2308      	moveq	r3, #8
 80021ca:	4851      	ldr	r0, [pc, #324]	@ (8002310 <_printf_i+0x238>)
 80021cc:	2100      	movs	r1, #0
 80021ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80021d2:	6866      	ldr	r6, [r4, #4]
 80021d4:	2e00      	cmp	r6, #0
 80021d6:	bfa8      	it	ge
 80021d8:	6821      	ldrge	r1, [r4, #0]
 80021da:	60a6      	str	r6, [r4, #8]
 80021dc:	bfa4      	itt	ge
 80021de:	f021 0104 	bicge.w	r1, r1, #4
 80021e2:	6021      	strge	r1, [r4, #0]
 80021e4:	b90d      	cbnz	r5, 80021ea <_printf_i+0x112>
 80021e6:	2e00      	cmp	r6, #0
 80021e8:	d04b      	beq.n	8002282 <_printf_i+0x1aa>
 80021ea:	4616      	mov	r6, r2
 80021ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80021f0:	fb03 5711 	mls	r7, r3, r1, r5
 80021f4:	5dc7      	ldrb	r7, [r0, r7]
 80021f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80021fa:	462f      	mov	r7, r5
 80021fc:	42bb      	cmp	r3, r7
 80021fe:	460d      	mov	r5, r1
 8002200:	d9f4      	bls.n	80021ec <_printf_i+0x114>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d10b      	bne.n	800221e <_printf_i+0x146>
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	07df      	lsls	r7, r3, #31
 800220a:	d508      	bpl.n	800221e <_printf_i+0x146>
 800220c:	6923      	ldr	r3, [r4, #16]
 800220e:	6861      	ldr	r1, [r4, #4]
 8002210:	4299      	cmp	r1, r3
 8002212:	bfde      	ittt	le
 8002214:	2330      	movle	r3, #48	@ 0x30
 8002216:	f806 3c01 	strble.w	r3, [r6, #-1]
 800221a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800221e:	1b92      	subs	r2, r2, r6
 8002220:	6122      	str	r2, [r4, #16]
 8002222:	464b      	mov	r3, r9
 8002224:	4621      	mov	r1, r4
 8002226:	4640      	mov	r0, r8
 8002228:	f8cd a000 	str.w	sl, [sp]
 800222c:	aa03      	add	r2, sp, #12
 800222e:	f7ff fee1 	bl	8001ff4 <_printf_common>
 8002232:	3001      	adds	r0, #1
 8002234:	d14a      	bne.n	80022cc <_printf_i+0x1f4>
 8002236:	f04f 30ff 	mov.w	r0, #4294967295
 800223a:	b004      	add	sp, #16
 800223c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	f043 0320 	orr.w	r3, r3, #32
 8002246:	6023      	str	r3, [r4, #0]
 8002248:	2778      	movs	r7, #120	@ 0x78
 800224a:	4832      	ldr	r0, [pc, #200]	@ (8002314 <_printf_i+0x23c>)
 800224c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	6831      	ldr	r1, [r6, #0]
 8002254:	061f      	lsls	r7, r3, #24
 8002256:	f851 5b04 	ldr.w	r5, [r1], #4
 800225a:	d402      	bmi.n	8002262 <_printf_i+0x18a>
 800225c:	065f      	lsls	r7, r3, #25
 800225e:	bf48      	it	mi
 8002260:	b2ad      	uxthmi	r5, r5
 8002262:	6031      	str	r1, [r6, #0]
 8002264:	07d9      	lsls	r1, r3, #31
 8002266:	bf44      	itt	mi
 8002268:	f043 0320 	orrmi.w	r3, r3, #32
 800226c:	6023      	strmi	r3, [r4, #0]
 800226e:	b11d      	cbz	r5, 8002278 <_printf_i+0x1a0>
 8002270:	2310      	movs	r3, #16
 8002272:	e7ab      	b.n	80021cc <_printf_i+0xf4>
 8002274:	4826      	ldr	r0, [pc, #152]	@ (8002310 <_printf_i+0x238>)
 8002276:	e7e9      	b.n	800224c <_printf_i+0x174>
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	f023 0320 	bic.w	r3, r3, #32
 800227e:	6023      	str	r3, [r4, #0]
 8002280:	e7f6      	b.n	8002270 <_printf_i+0x198>
 8002282:	4616      	mov	r6, r2
 8002284:	e7bd      	b.n	8002202 <_printf_i+0x12a>
 8002286:	6833      	ldr	r3, [r6, #0]
 8002288:	6825      	ldr	r5, [r4, #0]
 800228a:	1d18      	adds	r0, r3, #4
 800228c:	6961      	ldr	r1, [r4, #20]
 800228e:	6030      	str	r0, [r6, #0]
 8002290:	062e      	lsls	r6, r5, #24
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	d501      	bpl.n	800229a <_printf_i+0x1c2>
 8002296:	6019      	str	r1, [r3, #0]
 8002298:	e002      	b.n	80022a0 <_printf_i+0x1c8>
 800229a:	0668      	lsls	r0, r5, #25
 800229c:	d5fb      	bpl.n	8002296 <_printf_i+0x1be>
 800229e:	8019      	strh	r1, [r3, #0]
 80022a0:	2300      	movs	r3, #0
 80022a2:	4616      	mov	r6, r2
 80022a4:	6123      	str	r3, [r4, #16]
 80022a6:	e7bc      	b.n	8002222 <_printf_i+0x14a>
 80022a8:	6833      	ldr	r3, [r6, #0]
 80022aa:	2100      	movs	r1, #0
 80022ac:	1d1a      	adds	r2, r3, #4
 80022ae:	6032      	str	r2, [r6, #0]
 80022b0:	681e      	ldr	r6, [r3, #0]
 80022b2:	6862      	ldr	r2, [r4, #4]
 80022b4:	4630      	mov	r0, r6
 80022b6:	f000 f859 	bl	800236c <memchr>
 80022ba:	b108      	cbz	r0, 80022c0 <_printf_i+0x1e8>
 80022bc:	1b80      	subs	r0, r0, r6
 80022be:	6060      	str	r0, [r4, #4]
 80022c0:	6863      	ldr	r3, [r4, #4]
 80022c2:	6123      	str	r3, [r4, #16]
 80022c4:	2300      	movs	r3, #0
 80022c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022ca:	e7aa      	b.n	8002222 <_printf_i+0x14a>
 80022cc:	4632      	mov	r2, r6
 80022ce:	4649      	mov	r1, r9
 80022d0:	4640      	mov	r0, r8
 80022d2:	6923      	ldr	r3, [r4, #16]
 80022d4:	47d0      	blx	sl
 80022d6:	3001      	adds	r0, #1
 80022d8:	d0ad      	beq.n	8002236 <_printf_i+0x15e>
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	079b      	lsls	r3, r3, #30
 80022de:	d413      	bmi.n	8002308 <_printf_i+0x230>
 80022e0:	68e0      	ldr	r0, [r4, #12]
 80022e2:	9b03      	ldr	r3, [sp, #12]
 80022e4:	4298      	cmp	r0, r3
 80022e6:	bfb8      	it	lt
 80022e8:	4618      	movlt	r0, r3
 80022ea:	e7a6      	b.n	800223a <_printf_i+0x162>
 80022ec:	2301      	movs	r3, #1
 80022ee:	4632      	mov	r2, r6
 80022f0:	4649      	mov	r1, r9
 80022f2:	4640      	mov	r0, r8
 80022f4:	47d0      	blx	sl
 80022f6:	3001      	adds	r0, #1
 80022f8:	d09d      	beq.n	8002236 <_printf_i+0x15e>
 80022fa:	3501      	adds	r5, #1
 80022fc:	68e3      	ldr	r3, [r4, #12]
 80022fe:	9903      	ldr	r1, [sp, #12]
 8002300:	1a5b      	subs	r3, r3, r1
 8002302:	42ab      	cmp	r3, r5
 8002304:	dcf2      	bgt.n	80022ec <_printf_i+0x214>
 8002306:	e7eb      	b.n	80022e0 <_printf_i+0x208>
 8002308:	2500      	movs	r5, #0
 800230a:	f104 0619 	add.w	r6, r4, #25
 800230e:	e7f5      	b.n	80022fc <_printf_i+0x224>
 8002310:	080025b7 	.word	0x080025b7
 8002314:	080025c8 	.word	0x080025c8

08002318 <memmove>:
 8002318:	4288      	cmp	r0, r1
 800231a:	b510      	push	{r4, lr}
 800231c:	eb01 0402 	add.w	r4, r1, r2
 8002320:	d902      	bls.n	8002328 <memmove+0x10>
 8002322:	4284      	cmp	r4, r0
 8002324:	4623      	mov	r3, r4
 8002326:	d807      	bhi.n	8002338 <memmove+0x20>
 8002328:	1e43      	subs	r3, r0, #1
 800232a:	42a1      	cmp	r1, r4
 800232c:	d008      	beq.n	8002340 <memmove+0x28>
 800232e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002336:	e7f8      	b.n	800232a <memmove+0x12>
 8002338:	4601      	mov	r1, r0
 800233a:	4402      	add	r2, r0
 800233c:	428a      	cmp	r2, r1
 800233e:	d100      	bne.n	8002342 <memmove+0x2a>
 8002340:	bd10      	pop	{r4, pc}
 8002342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800234a:	e7f7      	b.n	800233c <memmove+0x24>

0800234c <_sbrk_r>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	2300      	movs	r3, #0
 8002350:	4d05      	ldr	r5, [pc, #20]	@ (8002368 <_sbrk_r+0x1c>)
 8002352:	4604      	mov	r4, r0
 8002354:	4608      	mov	r0, r1
 8002356:	602b      	str	r3, [r5, #0]
 8002358:	f7fe fc38 	bl	8000bcc <_sbrk>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d102      	bne.n	8002366 <_sbrk_r+0x1a>
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	b103      	cbz	r3, 8002366 <_sbrk_r+0x1a>
 8002364:	6023      	str	r3, [r4, #0]
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	200001d0 	.word	0x200001d0

0800236c <memchr>:
 800236c:	4603      	mov	r3, r0
 800236e:	b510      	push	{r4, lr}
 8002370:	b2c9      	uxtb	r1, r1
 8002372:	4402      	add	r2, r0
 8002374:	4293      	cmp	r3, r2
 8002376:	4618      	mov	r0, r3
 8002378:	d101      	bne.n	800237e <memchr+0x12>
 800237a:	2000      	movs	r0, #0
 800237c:	e003      	b.n	8002386 <memchr+0x1a>
 800237e:	7804      	ldrb	r4, [r0, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	428c      	cmp	r4, r1
 8002384:	d1f6      	bne.n	8002374 <memchr+0x8>
 8002386:	bd10      	pop	{r4, pc}

08002388 <memcpy>:
 8002388:	440a      	add	r2, r1
 800238a:	4291      	cmp	r1, r2
 800238c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002390:	d100      	bne.n	8002394 <memcpy+0xc>
 8002392:	4770      	bx	lr
 8002394:	b510      	push	{r4, lr}
 8002396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800239a:	4291      	cmp	r1, r2
 800239c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023a0:	d1f9      	bne.n	8002396 <memcpy+0xe>
 80023a2:	bd10      	pop	{r4, pc}

080023a4 <_realloc_r>:
 80023a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023a8:	4680      	mov	r8, r0
 80023aa:	4615      	mov	r5, r2
 80023ac:	460c      	mov	r4, r1
 80023ae:	b921      	cbnz	r1, 80023ba <_realloc_r+0x16>
 80023b0:	4611      	mov	r1, r2
 80023b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023b6:	f7ff bc39 	b.w	8001c2c <_malloc_r>
 80023ba:	b92a      	cbnz	r2, 80023c8 <_realloc_r+0x24>
 80023bc:	f7ff fbcc 	bl	8001b58 <_free_r>
 80023c0:	2400      	movs	r4, #0
 80023c2:	4620      	mov	r0, r4
 80023c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023c8:	f000 f81a 	bl	8002400 <_malloc_usable_size_r>
 80023cc:	4285      	cmp	r5, r0
 80023ce:	4606      	mov	r6, r0
 80023d0:	d802      	bhi.n	80023d8 <_realloc_r+0x34>
 80023d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80023d6:	d8f4      	bhi.n	80023c2 <_realloc_r+0x1e>
 80023d8:	4629      	mov	r1, r5
 80023da:	4640      	mov	r0, r8
 80023dc:	f7ff fc26 	bl	8001c2c <_malloc_r>
 80023e0:	4607      	mov	r7, r0
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d0ec      	beq.n	80023c0 <_realloc_r+0x1c>
 80023e6:	42b5      	cmp	r5, r6
 80023e8:	462a      	mov	r2, r5
 80023ea:	4621      	mov	r1, r4
 80023ec:	bf28      	it	cs
 80023ee:	4632      	movcs	r2, r6
 80023f0:	f7ff ffca 	bl	8002388 <memcpy>
 80023f4:	4621      	mov	r1, r4
 80023f6:	4640      	mov	r0, r8
 80023f8:	f7ff fbae 	bl	8001b58 <_free_r>
 80023fc:	463c      	mov	r4, r7
 80023fe:	e7e0      	b.n	80023c2 <_realloc_r+0x1e>

08002400 <_malloc_usable_size_r>:
 8002400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002404:	1f18      	subs	r0, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	bfbc      	itt	lt
 800240a:	580b      	ldrlt	r3, [r1, r0]
 800240c:	18c0      	addlt	r0, r0, r3
 800240e:	4770      	bx	lr

08002410 <_init>:
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	bf00      	nop
 8002414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002416:	bc08      	pop	{r3}
 8002418:	469e      	mov	lr, r3
 800241a:	4770      	bx	lr

0800241c <_fini>:
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241e:	bf00      	nop
 8002420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002422:	bc08      	pop	{r3}
 8002424:	469e      	mov	lr, r3
 8002426:	4770      	bx	lr
